/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

import groovy.sql.Sql

configurations {
    flyway
    classpath
}

dependencies {
    compile 'com.googlecode.flyway:flyway-core:1.7',
            'com.googlecode.flyway:flyway-ant:1.7',
            'postgresql:postgresql:9.1-901.jdbc4',
            'com.mchange:c3p0:0.9.2.1',
            'org.springframework:spring-tx:3.1.1.RELEASE',
            'org.springframework:spring-jdbc:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.aspectj:aspectjrt:1.7.0',
            'org.mybatis:mybatis:3.2.2',
            'org.mybatis:mybatis-spring:1.2.0'

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE'

    flyway 'com.googlecode.flyway:flyway-ant:1.7',
            'postgresql:postgresql:9.1-901.jdbc4'

    classpath 'postgresql:postgresql:9.1-901.jdbc4'

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }

}
def connectionString = "jdbc:postgresql://$databaseHostName:$databasePort/$dbName"

task setupDB << {
    tasks.dropDB.execute()
    tasks.createDB.execute()

    ext.flyway_classpath = files(configurations.flyway)
    ant.taskdef(name: 'flywayInit', classname: 'com.googlecode.flyway.ant.InitTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayInit(driver: dbDriver, url: connectionString, user: dbUser, password: dbPassword)

    tasks.migrateDB.execute()
}

task createDB << {
    println("Creating Database..")
    executeSql('create database ' + dbName)
}

task dropDB << {
    println("Dropping Database..")
    if (!dropIfInUse("procpid")) {
        dropIfInUse("pid")
    }
}

def boolean dropIfInUse(String pid) {
    try {
        executeSql('SELECT pg_terminate_backend(' + pid + ') FROM pg_stat_activity WHERE datname=\'' + dbName + '\'')
        executeSql('DROP DATABASE IF EXISTS ' + dbName)
        return true
    } catch (Exception e) {
        return false
    }
}

jar.doFirst {
    tasks.migrateDB.execute()
}

task migrateDB() << {
    println("migrateDB:")
    ext.flyway_classpath = files(sourceSets.main.resources.srcDirs) + files(configurations.flyway)
    ant.taskdef(name: 'flywayMigrate', classname: 'com.googlecode.flyway.ant.MigrateTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayMigrate(driver: dbDriver, url: connectionString, user: dbUser, password: dbPassword)
}

task testSeed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', '../../test-data/sql/seed.sql', '-h', databaseHostName, '-w', dbName
}

task seed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', 'src/main/resources/seed/seed.sql', '-h', databaseHostName, '-w', dbName
}

def executeSql(String statement) {
    configurations.classpath.each { file ->
        gradle.class.classLoader.addURL(file.toURI().toURL())
    }
    Class.forName(dbDriver)
    Sql sql = (Sql) Sql.newInstance(
            "jdbc:postgresql://$databaseHostName:$databasePort",
            dbUser,
            dbPassword,
            dbDriver
    )

    sql.execute(statement)
}

