import groovy.sql.Sql

configurations {
    flyway
    classpath
}

dependencies {
    compile 'com.googlecode.flyway:flyway-core:1.7',
            'com.googlecode.flyway:flyway-ant:1.7',
            'postgresql:postgresql:9.1-901.jdbc4',
            'c3p0:c3p0:0.9.0.4',
            'org.springframework:spring-tx:3.1.1.RELEASE',
            'org.springframework:spring-jdbc:3.1.1.RELEASE',
            'org.mybatis:mybatis-spring:1.1.1'

    flyway 'com.googlecode.flyway:flyway-ant:1.7',
            'postgresql:postgresql:9.1-901.jdbc4'

    classpath 'postgresql:postgresql:9.1-901.jdbc4'
}

task setupDB(dependsOn: ["createDB", clean]) << {
    ext.flyway_classpath = files(configurations.flyway)
    ant.taskdef(name: 'flywayInit', classname: 'com.googlecode.flyway.ant.InitTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayInit(driver: 'org.postgresql.Driver', url: 'jdbc:postgresql:' + dbName, user: dbUser, password: dbPassword)
    tasks.migrateDB.execute()
}

task createDB(dependsOn: "dropDB") << {
    println("Creating Database..")
    executeSql('create database ' + dbName)
}

task dropDB() << {
    println("Dropping Database..")
    if (!dropIfInUse(dbName, "procpid")) {
        dropIfInUse(dbName, "pid")
    }
}

boolean dropIfInUse(String dbName, String pid) {
    try {
        executeSql('select pg_terminate_backend(' + pid + ') from pg_stat_activity where datname=\'' + dbName + '\'')
        executeSql('drop database if exists ' + dbName)
        return true
    } catch (Exception e) {
        return false
    }
}

jar.doFirst {
    tasks.migrateDB.execute()
}

task migrateDB() << {
    println("migrateDB:")
    ext.flyway_classpath = files(sourceSets.main.resources.srcDirs) + files(configurations.flyway)
    ant.taskdef(name: 'flywayMigrate', classname: 'com.googlecode.flyway.ant.MigrateTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayMigrate(driver: 'org.postgresql.Driver', url: "jdbc:postgresql://$databaseHostName:$databasePort/$dbName", user: dbUser, password: dbPassword)
}

task testSeed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', '../../test-data/sql/seed.sql', '-w', dbName
}

task seed(dependsOn: ["migrateDB"], type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser,'--file', '../../seed/seed.sql', '-w', dbName
}

def executeSql(String statement) {
    configurations.classpath.each { file ->
        gradle.class.classLoader.addURL(file.toURI().toURL())
    }
    ext.driverName = 'org.postgresql.Driver'
    Class.forName(driverName)
    Sql sql = (Sql) Sql.newInstance(
            "jdbc:postgresql://$databaseHostName:$databasePort",
            dbUser,
            dbPassword,
            driverName
    )
    sql.execute(statement)
}

