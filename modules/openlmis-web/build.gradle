/*
 * Copyright Â© 2013 VillageReach.  All Rights Reserved.  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 *
 * If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

apply plugin: 'jetty'
apply plugin: 'war'
def keystore = "$rootDir/certificate/server.jks"
def password = 'password'

buildscript {
    repositories {
        mavenCentral();
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }
    }

    dependencies {
        classpath "org.lesscss:lesscss:1.3.1"
        classpath 'bmuschko:gradle-cargo-plugin:0.5.6'
    }
}

dependencies {
    compile 'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'javax.servlet:servlet-api:2.5',
            'commons-collections:commons-collections:20040616',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
            'org.springframework.security:spring-security-taglibs:3.1.2.RELEASE',
            'org.json:json:20090211',
            'log4j:log4j:1.2.15',
            'org.aspectj:aspectjweaver:1.7.0',
            'cglib:cglib:2.2.2',
            'commons-fileupload:commons-fileupload:1.2.2',
            'javax.servlet:servlet-api:2.5',
            'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.25.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.25.0 ',
            'com.itextpdf:itextpdf:5.4.0',
            project(':modules:authentication'),
            project(':modules:requisition'),
            project(':modules:core')


    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            'org.springframework:spring-test-mvc:1.0.0.M1',
            'javax.servlet:servlet-api:2.5',
            'javax.servlet:servlet-api:2.5',
            'org.powermock:powermock-api-mockito:1.4.12',
            'org.powermock:powermock-module-junit4:1.4.12',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
            'cglib:cglib:2.2.2',
            project(path: ':modules:core', configuration: 'testFixtures'),
            project(path: ':modules:requisition', configuration: 'testFixtures')
}

task jettyRunWarDaemon(dependsOn: war)

jettyRunWarDaemon.doFirst {
    jettyRunWar.daemon = true
    jettyRunWar.execute()
}

jettyRunWar {
    connectors = configureHttps(keystore, password)
    doFirst() {
        System.setProperty('javax.net.ssl.trustStore', keystore)
        System.setProperty('javax.net.ssl.trustStorePassword', password)
    }
    contextPath = ''
    jettyRunWar.httpPort = 9091
}

jettyRun {
    connectors = configureHttps(keystore, password)

    doFirst() {
        System.setProperty('javax.net.ssl.trustStore', keystore)
        System.setProperty('javax.net.ssl.trustStorePassword', password)
    }

    contextPath = ''
    jettyRun.httpPort = 9091
    jettyRun.scanIntervalSeconds = 1
    System.properties.get('environmentName', 'local')
}

def configureHttps(keystore, password) {
    connectors = [jettyRun.class.classLoader.loadClass('org.mortbay.jetty.security.SslSocketConnector').newInstance()]
    connectors[0].port = 9091
    connectors[0].keystore = connectors[0].truststore = keystore
    connectors[0].keyPassword = connectors[0].trustPassword = password
    connectors[0].wantClientAuth = true
    connectors[0].needClientAuth = false
    return connectors;
}

task run(dependsOn: jettyRun)

task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}

task deployOpenLmis(type: GradleBuild) {
    tasks = ['build']
    tasks = ['cargoRedeployRemote']
}

task compileLess << {
    println "Running lessCompile task..."
    def lessCompiler = new org.lesscss.LessCompiler()
    def tree = fileTree('src/main/webapp/public/less').include('**/*.less')
    tree.each {File file ->
        def outputCss = new File("${projectDir}/src/main/webapp/public/css/" + file.name.replace(".less", ".css"))
        println "LESS: Compiling ${file} to ${outputCss}..."
        lessCompiler.compile(file, outputCss)
    }
}

task JasmineRun(type: Test) {
    include '**/org/openlmis/jasmine/*.*'
    useTestNG()
}

compileJava.dependsOn compileLess

task runJsCover(type: Exec) {
    commandLine 'sh', "${projectDir}/src/test/javascript/runJsCover.sh"
}
