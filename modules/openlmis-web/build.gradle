/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.Exec

apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'js'

apply plugin: 'cobertura'

task npm(type: Exec) {
    group = "Build"
    description = "Installs all Node.js dependencies defined in package.json"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
    inputs.file "package.json"
    outputs.dir "node_modules"
}

class GruntTask extends Exec {
    private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
    private String switches = "--no-color"

    String gruntArgs = ""

    public GruntTask() {
        super()
        this.setExecutable(gruntExecutable)
    }

    public void setGruntArgs(String gruntArgs) {
        this.args = "$switches $gruntArgs".trim().split(" ") as List
    }
}

task jsHint(type: GruntTask) {
    description = 'Runs JSHint against all JS files and fails upon JSHint error'
    workingDir '.'
    gruntArgs = "jshint"
    dependsOn npm
}

task lesslint(type: GruntTask) {
    description = 'Runs LessLint against all LESS files'
    workingDir '.'
    gruntArgs = "lesslint --force"
    dependsOn npm
}

task less(type: GruntTask) {
    description = 'Compiles all LESS files to CSS'
    workingDir '.'
    gruntArgs = "less"
    dependsOn npm
}

task uglify(type: GruntTask) {
    description = 'Minifies JS files'
    workingDir '.'
    gruntArgs = "uglify"
    dependsOn npm
}

task lesswatch(type: GruntTask) {
    description = 'Looks for changes in LESS and recompiles to CSS upon detecting change'
    workingDir '.'
    gruntArgs = 'watch'
    ignoreExitValue = true
    dependsOn npm
}

buildscript {
    repositories {
        mavenCentral();
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }
    }

    dependencies {
        classpath "org.lesscss:lesscss:1.3.1"
        classpath 'bmuschko:gradle-cargo-plugin:0.5.6'
        classpath 'com.eriwen:gradle-js-plugin:1.5.0'
    }
}

javascript.source {
    dev {
        js {
            srcDir "src/main/webapp/public/js"
            include "**/*.js"
            exclude "**/*min.js", "**/select2-ext.js"
        }
    }
}

war {
    from("src/main/webapp/public/minJs/") {
        into "public/js/"
    }

    exclude "public/minJs/"
    exclude "public/less/"
}

tasks.withType(War) {
    def now = new Date()
    String currentTime = now.getTime() + "";
    eachFile { FileCopyDetails fileCopy ->
        if (fileCopy.name.equals('services.js') || fileCopy.name.equals('offline.appcacheOFF')) {
            fileCopy.filter(ReplaceTokens, tokens: [version: currentTime])
        }
        if (fileCopy.name.equals('offline.appcacheOFF')) {
            fileCopy.setName('offline.appcache')
        }
    }
}

task cleanMinJs(type: Delete) {
    delete 'src/main/webapp/public/minJs/'
}

war.doLast {
    tasks.cleanMinJs.execute()
}

build.doLast {
    tasks.jsHint.execute()
    tasks.cleanMinJs.execute()
}

dependencies {
    compile 'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'javax.servlet:servlet-api:2.5',
            'commons-collections:commons-collections:20040616',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
            'org.springframework.security:spring-security-taglibs:3.1.2.RELEASE',
            'org.json:json:20090211',
            'log4j:log4j:1.2.15',
            'org.aspectj:aspectjweaver:1.7.0',
            'cglib:cglib:2.2.2',
            'commons-fileupload:commons-fileupload:1.2.2',
            'javax.servlet:servlet-api:2.5',
            'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.35.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.33.0 ',
            'com.itextpdf:itextpdf:5.4.0',
            project(':modules:authentication'),
            project(':modules:requisition'),
            project(':modules:core'),
            project(':modules:shipment'),
            project(':modules:rest-api'),
            project(':modules:reporting'),
            project(':modules:distribution')


    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            'org.springframework:spring-test-mvc:1.0.0.M1',
            'javax.servlet:servlet-api:2.5',
            'javax.servlet:servlet-api:2.5',
            'org.powermock:powermock-api-mockito:1.4.12',
            'org.powermock:powermock-module-junit4:1.4.12',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
            'cglib:cglib:2.2.2',
            project(path: ':modules:core', configuration: 'testFixtures'),
            project(path: ':modules:rest-api', configuration: 'testFixtures'),
            project(path: ':modules:requisition', configuration: 'testFixtures'),
            project(path: ':modules:shipment', configuration: 'testFixtures'),
            project(path: ':modules:distribution', configuration: 'testFixtures'),
            project(path: ':modules:reporting', configuration: 'testFixtures')
}

task jettyDaemon(dependsOn: war) {
    description = 'Brings up the Jetty server as a daemon process returning the terminal to continue with other tasks'
    doFirst {
        jettyRun.daemon = true
        jettyRun.execute()
    }
}

jettyRun {
    jettyRun.httpPort = 9091
    contextPath = ''
    jettyRun.scanIntervalSeconds = 1
    System.properties.get('environmentName', 'local')
}

def configureHttps(keystore, password) {
    ext.connectors = [jettyRun.class.classLoader.loadClass('org.mortbay.jetty.security.SslSocketConnector').newInstance()]
    ext.connectors[0].port = 9091
    ext.connectors[0].keystore = connectors[0].truststore = keystore
    ext.connectors[0].keyPassword = connectors[0].trustPassword = password
    ext.connectors[0].wantClientAuth = true
    ext.connectors[0].needClientAuth = false
    return ext.connectors;
}

task run(dependsOn: [jettyDaemon, lesswatch]) {
    description = 'Runs the Jetty server and starts watching LESS files for changes'
}

task explodedWar(type: Copy) {
    description = 'Explodes WAR file'
    into "$buildDir/exploded"
    with war
}

task deployOpenLmis(type: GradleBuild) {
    tasks = ['build']
    tasks = ['cargoRedeployRemote']
}

task phantomRun(type: Exec) {
    description = 'Runs Jasmine specs in PhantomJS'
    commandLine 'phantomjs', "${projectDir}/src/test/javascript/lib/run_jasmine_test.coffee", "${projectDir}/src/test/javascript/SpecRunner.html"
}

compileJava.dependsOn less

task runJsCover(type: Exec) {
    description = 'Generates a JS code coverage report for Jasmine specs'
    commandLine 'sh', "${projectDir}/src/test/javascript/runJsCover.sh"
}

cobertura {
    coverageFormats << 'xml'
}