/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'jetty'
apply plugin: 'java'

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:2.35.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.33.0',
            'org.seleniumhq.selenium:selenium-ie-driver:2.33.0',
            'org.seleniumhq.selenium:selenium-chrome-driver:2.33.0',
            'net.sf.json-lib:json-lib:0.9',
            'postgresql:postgresql:9.0-801.jdbc4',
            project(':test-modules:test-core')


    testCompile 'org.springframework:spring-test:3.1.1.RELEASE'
    testCompile 'org.seleniumhq.selenium:selenium-java:2.35.0'
    testCompile 'org.seleniumhq.selenium:selenium-ie-driver:2.33.0'
    testCompile 'org.seleniumhq.selenium:selenium-firefox-driver:2.33.0'
    testCompile 'org.seleniumhq.selenium:selenium-chrome-driver:2.33.0'
    testCompile 'org.testng:testng:6.1.1'
    testCompile group: 'com.google.inject', name: 'guice', version: '3.0'
    testCompile("org.uncommons:reportng:1.1.2") {
        exclude group: "org.testng", module: "testng"
    }
    testCompile 'net.sf.json-lib:json-lib:0.9'
    testCompile 'postgresql:postgresql:9.0-801.jdbc4'
    testCompile project(':test-modules:test-core')

    testCompile 'info.cukes:cucumber-core:1.1.2'
    testCompile 'info.cukes:cucumber-java:1.1.2'
    testCompile 'info.cukes:cucumber-html:0.2.3'
    testCompile 'info.cukes:cucumber-junit:1.1.2'
    testCompile 'info.cukes:cucumber-jvm:1.1.2'
    testCompile 'info.cukes:cucumber-jvm-deps:1.0.3'
    testCompile 'junit:junit:4.10'
    testCompile 'postgresql:postgresql:9.0-801.jdbc4'
}

test {
    exclude '**/org/openlmis/functional/*.*'
}

task buildOpenLmis(type: GradleBuild) {
    buildFile = '../../modules/openlmis-web/build.gradle'
    tasks = ['jettyDaemon']
}


task requisitionSmokeTest(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {

        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'firefox')
            System.properties.get('dburl', "$dburl")
            System.properties.get('baseurl', "$baseurl")
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeRequisition','--tags','~@WIP', 'src/test/resources']
        }
    }
}

requisitionSmokeTest.doFirst() {
    buildOpenLmis.execute()
}

task distributionSmokeTest(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {

        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'firefox')
            System.properties.get('dburl', "$dburl")
            System.properties.get('baseurl', "$baseurl")
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeDistribution','--tags','~@WIP', 'src/test/resources']
        }
    }
}

distributionSmokeTest.doFirst() {
    buildOpenLmis.execute()
}

task e2eTestChrome(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {

        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'chrome')
            System.properties.get('dburl', "$dburl")
            System.properties.get('baseurl', "$baseurl")
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@e2e','--tags','~@WIP', 'src/test/resources']
        }
    }
}

e2eTestChrome.doFirst() {
    buildOpenLmis.execute()
}
task requisitionSmokeTestChrome(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'chrome')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeRequisition', '--tags','~@WIP', 'src/test/resources']
        }
    }
}

requisitionSmokeTestChrome.doFirst() {
    buildOpenLmis.execute()
}

task distributionSmokeTestChrome(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'chrome')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeDistribution', '--tags','~@WIP', 'src/test/resources']
        }
    }
}

distributionSmokeTestChrome.doFirst() {
    buildOpenLmis.execute()
}

task requisitionSmokeTestIE(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'ie')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeRequisition','--tags','~@WIP', 'src/test/resources']
        }
    }
}

requisitionSmokeTestIE.doFirst() {
    buildOpenLmis.execute()
}

task distributionSmokeTestIE(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'ie')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeDistribution','--tags','~@WIP', 'src/test/resources']
        }
    }
}

distributionSmokeTestIE.doFirst() {
    buildOpenLmis.execute()
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

repositories {
    mavenCentral()
}


task adminTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'firefox'
        systemProperties['dburl'] = "$dburl"
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-admin.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

adminTest.doFirst() {
    buildOpenLmis.execute()
}

task requisitionTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'firefox'
        systemProperties['dburl'] = "$dburl"
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-requisition.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

requisitionTest.doFirst() {
    buildOpenLmis.execute()
}

task distributionTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'firefox'
        systemProperties['dburl'] = "$dburl"
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-distribution.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

distributionTest.doFirst() {
    buildOpenLmis.execute()
}

task offlineTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'chromeM'
        systemProperties['dburl'] = 'jdbc:postgresql://192.168.34.2/open_lmis'
        systemProperties['baseurl'] = 'https://qa-openlmis.org/'

        suites 'src/test/java/org/openlmis/functional/testng-offline.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

offlineTest.doFirst() {
    buildOpenLmis.execute()
}


