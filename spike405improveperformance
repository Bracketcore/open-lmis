Index: modules/openlmis-web/src/main/webapp/public/js/rnr/controller/create-rnr-controller.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function CreateRnrController($scope, ReferenceData, ProgramRnRColumnList, $location, Requisition, Requisitions, $routeParams, LossesAndAdjustmentsReferenceData, $rootScope) {\n\n  $scope.lossesAndAdjustmentsModal = [];\n  $scope.rnrLineItems = [];\n  $rootScope.fixToolBar();\n  if (!$scope.$parent.rnr) {\n    Requisition.get({facilityId:$routeParams.facility, programId:$routeParams.program, periodId:$routeParams.period},\n      function (data) {\n        if (data.rnr) {\n          $scope.rnr = data.rnr;\n          $scope.formDisabled = isFormDisabled();\n          populateRnrLineItems($scope.rnr);\n        } else {\n          $scope.$parent.error = \"Requisition does not exist. Please initiate.\";\n          $location.path($scope.$parent.sourceUrl);\n        }\n      }, {});\n  } else {\n    $scope.formDisabled = isFormDisabled();\n    populateRnrLineItems($scope.$parent.rnr);\n  }\n\n  ReferenceData.get({}, function (data) {\n    $scope.currency = data.currency;\n  }, {});\n\n  LossesAndAdjustmentsReferenceData.get({}, function (data) {\n    $scope.allTypes = data.lossAdjustmentTypes;\n  }, {});\n\n  ProgramRnRColumnList.get({programId:$routeParams.program}, function (data) {\n    function resetFullSupplyItemsCostIfNull(rnr) {\n      if (rnr == null) return;\n      if (rnr.fullSupplyItemsSubmittedCost == null)\n        rnr.fullSupplyItemsSubmittedCost = 0;\n    }\n\n        if (data.rnrColumnList.length > 0) {\n            $scope.programRnRColumnList = data.rnrColumnList;\n            resetFullSupplyItemsCostIfNull($scope.$parent.rnr);\n        } else {\n            $scope.$parent.error = \"Please contact Admin to define R&R template for this program\";\n            $location.path($scope.$parent.sourceUrl);\n        }\n    }, function () {\n        $location.path($scope.$parent.sourceUrl);\n    });\n\n  $scope.saveRnr = function () {\n    $scope.submitError = \"\";\n    $scope.inputClass = \"\";\n    $scope.submitMessage = \"\";\n    if ($scope.saveRnrForm.$error.rnrError) {\n      $scope.error = \"Please correct errors before saving.\";\n      $scope.message = \"\";\n      return;\n    }\n\n    Requisitions.update({id:$scope.rnr.id, operation:\"save\"},\n      $scope.rnr, function (data) {\n        $scope.message = data.success;\n        $scope.error = \"\";\n      }, function (data) {\n        $scope.error = data.error;\n        $scope.message = \"\";\n      });\n  };\n\n  $scope.highlightRequired = function (value) {\n    if ($scope.inputClass == 'required' && (isUndefined(value) || value.trim().length == 0)) {\n      return \"required-error\";\n    }\n    return null;\n  };\n\n  $scope.highlightRequiredFieldInModal = function (value) {\n    if (isUndefined(value)) return \"required-error\";\n    return null;\n  };\n\n  $scope.highlightWarning = function (value, index) {\n    if ((isUndefined(value) || value.trim().length == 0 || value == false) && $scope.inputClass == 'required' && $scope.rnrLineItems[index].rnrLineItem.quantityRequested) {\n      return \"warning-error\";\n    }\n    return null;\n  };\n\n  function valid() {\n    if ($scope.saveRnrForm.$error.rnrError) {\n      $scope.submitError = \"Please correct the errors on the R&R form before submitting\";\n      $scope.submitMessage = \"\";\n      return false;\n    }\n    if ($scope.saveRnrForm.$error.required) {\n      $scope.saveRnr();\n      $scope.inputClass = \"required\";\n      $scope.submitMessage = \"\";\n      $scope.submitError = 'Please complete the highlighted fields on the R&R form before submitting';\n      return false;\n    }\n    if (!formulaValid()) {\n      $scope.saveRnr();\n      $scope.submitError = \"Please correct the errors on the R&R form before submitting\";\n      $scope.submitMessage = \"\";\n      return false;\n    }\n    return true;\n  }\n\n  function isFormDisabled() {\n    if ($scope.rnr || $scope.$parent.rnr) {\n      if ($scope.rnr.status == 'AUTHORIZED') return true;\n      if (($scope.rnr.status == 'SUBMITTED' && !$rootScope.hasPermission('AUTHORIZE_REQUISITION')) || ($scope.rnr.status == 'INITIATED' && !$rootScope.hasPermission('CREATE_REQUISITION'))) return true;\n    }\n    return false;\n  }\n\n  $scope.submitRnr = function () {\n    if (!valid()) return;\n\n    Requisitions.update({id:$scope.rnr.id, operation:\"submit\"},\n      $scope.rnr, function (data) {\n        $scope.rnr.status = \"SUBMITTED\";\n        $scope.formDisabled = !$rootScope.hasPermission('AUTHORIZE_REQUISITION');\n        $scope.submitMessage = data.success;\n        $scope.submitError = \"\";\n      }, function (data) {\n        $scope.submitError = data.data.error;\n      });\n  };\n\n  $scope.authorizeRnr = function () {\n    if (!valid()) return;\n\n    Requisitions.update({id:$scope.rnr.id, operation:\"authorize\"},\n      $scope.rnr, function (data) {\n        $scope.rnr.status = \"AUTHORIZED\";\n        $scope.formDisabled = true;\n        $scope.submitMessage = data.success;\n        $scope.submitError = \"\";\n      }, function (data) {\n        $scope.submitError = data.data.error;\n      });\n  };\n\n  $scope.getId = function (prefix, parent, isLossAdjustment) {\n    if (isLossAdjustment != null && isLossAdjustment != isUndefined && isLossAdjustment) {\n      return prefix + \"_\" + parent.$parent.$parent.$index + \"_\" + parent.$parent.$parent.$parent.$index;\n    }\n    return prefix + \"_\" + parent.$parent.$parent.$index;\n  };\n\n  $scope.hide = function () {\n    return \"\";\n  };\n\n  $scope.saveLossesAndAdjustmentsForRnRLineItem = function (rnrLineItem, rnr, programRnrColumnList) {\n    if (!isValidLossesAndAdjustments(rnrLineItem)) return;\n\n    rnrLineItem.fill(rnr, programRnrColumnList);\n    $scope.lossesAndAdjustmentsModal[rnrLineItem.rnrLineItem.id] = false;\n  };\n\n  $scope.resetModalError = function () {\n    $scope.modalError = '';\n  };\n\n  $scope.showCurrencySymbol = function (value) {\n    if (value != 0 && (isUndefined(value) || value.length == 0 || value == false)) {\n      return \"\";\n    }\n    return \"defined\";\n  };\n\n  $scope.showSelectedColumn = function (columnName) {\n    if (($scope.rnr.status == \"INITIATED\" || $scope.rnr.status == \"SUBMITTED\") && columnName == \"quantityApproved\")\n      return undefined;\n    return \"defined\";\n  };\n\n  $scope.showLossesAndAdjustmentModalForLineItem = function (lineItem) {\n    updateLossesAndAdjustmentTypesToDisplayForLineItem(lineItem);\n    $scope.lossesAndAdjustmentsModal[lineItem.id] = true;\n  };\n\n  $scope.removeLossAndAdjustment = function (lineItem, lossAndAdjustmentToDelete) {\n    lineItem.removeLossAndAdjustment(lossAndAdjustmentToDelete);\n    updateLossesAndAdjustmentTypesToDisplayForLineItem(lineItem.rnrLineItem);\n    $scope.resetModalError();\n  };\n\n  $scope.addLossAndAdjustment = function (lineItem, newLossAndAdjustment) {\n    lineItem.addLossAndAdjustment(newLossAndAdjustment);\n    updateLossesAndAdjustmentTypesToDisplayForLineItem(lineItem.rnrLineItem);\n  };\n\n  function isUndefined(value) {\n    return (value == null || value == undefined);\n  }\n\n  function formulaValid() {\n    var valid = true;\n    $scope.rnrLineItems.forEach(function (lineItem) {\n      if (lineItem.arithmeticallyInvalid($scope.programRnRColumnList) || lineItem.rnrLineItem.stockInHand < 0 || lineItem.rnrLineItem.quantityDispensed < 0) {\n        valid = false;\n      }\n    });\n    return valid;\n  }\n\n  function isValidLossesAndAdjustments(rnrLineItem) {\n    if (!isUndefined(rnrLineItem.rnrLineItem.lossesAndAdjustments)) {\n      for (var index in rnrLineItem.rnrLineItem.lossesAndAdjustments) {\n        if (isUndefined(rnrLineItem.rnrLineItem.lossesAndAdjustments[index].quantity)) {\n          $scope.modalError = 'Please correct the highlighted fields before submitting';\n          return false;\n        }\n      }\n    }\n    $scope.modalError = '';\n    return true;\n  }\n\n  function updateLossesAndAdjustmentTypesToDisplayForLineItem(lineItem) {\n    var lossesAndAdjustmentTypesForLineItem = [];\n    $(lineItem.lossesAndAdjustments).each(function (index, lineItemLossAndAdjustment) {\n      lossesAndAdjustmentTypesForLineItem.push(lineItemLossAndAdjustment.type.name);\n    });\n\n    var allTypes = $scope.allTypes;\n    $scope.lossesAndAdjustmentTypesToDisplay = $.grep(allTypes, function (lAndATypeObject) {\n      return $.inArray(lAndATypeObject.name, lossesAndAdjustmentTypesForLineItem) == -1;\n    });\n  }\n\n  $scope.getCellErrorClass = function (rnrLineItem, programRnRColumnList) {\n    return rnrLineItem.getErrorMessage(programRnRColumnList) ? 'cell-error-highlight' : '';\n  };\n\n  $scope.getRowErrorClass = function (rnrLineItem, programRnRColumnList) {\n    return $scope.getCellErrorClass(rnrLineItem, programRnRColumnList) ? 'row-error-highlight' : '';\n  };\n\n    function populateRnrLineItems(rnr) {\n        $(rnr.lineItems).each(function (i, lineItem) {\n            lineItem.cost = parseFloat((lineItem.packsToShip * lineItem.price).toFixed(2));\n            var rnrLineItem = new RnrLineItem(lineItem);\n            $scope.rnrLineItems.push(rnrLineItem);\n        });\n    }\n}\n
===================================================================
--- modules/openlmis-web/src/main/webapp/public/js/rnr/controller/create-rnr-controller.js	(revision 83f4761be08f420a827bd4db1e316b79f0ad0bff)
+++ modules/openlmis-web/src/main/webapp/public/js/rnr/controller/create-rnr-controller.js	(revision )
@@ -9,7 +9,7 @@
         if (data.rnr) {
           $scope.rnr = data.rnr;
           $scope.formDisabled = isFormDisabled();
-          populateRnrLineItems($scope.rnr);
+//          populateRnrLineItems($scope.rnr);
         } else {
           $scope.$parent.error = "Requisition does not exist. Please initiate.";
           $location.path($scope.$parent.sourceUrl);
@@ -17,7 +17,7 @@
       }, {});
   } else {
     $scope.formDisabled = isFormDisabled();
-    populateRnrLineItems($scope.$parent.rnr);
+//    populateRnrLineItems($scope.$parent.rnr);
   }
 
   ReferenceData.get({}, function (data) {
@@ -35,16 +35,16 @@
         rnr.fullSupplyItemsSubmittedCost = 0;
     }
 
-        if (data.rnrColumnList.length > 0) {
-            $scope.programRnRColumnList = data.rnrColumnList;
-            resetFullSupplyItemsCostIfNull($scope.$parent.rnr);
-        } else {
-            $scope.$parent.error = "Please contact Admin to define R&R template for this program";
-            $location.path($scope.$parent.sourceUrl);
-        }
-    }, function () {
-        $location.path($scope.$parent.sourceUrl);
-    });
+    if (data.rnrColumnList.length > 0) {
+      $scope.programRnRColumnList = data.rnrColumnList;
+      resetFullSupplyItemsCostIfNull($scope.$parent.rnr);
+    } else {
+      $scope.$parent.error = "Please contact Admin to define R&R template for this program";
+      $location.path($scope.$parent.sourceUrl);
+    }
+  }, function () {
+    $location.path($scope.$parent.sourceUrl);
+  });
 
   $scope.saveRnr = function () {
     $scope.submitError = "";
@@ -143,13 +143,6 @@
       });
   };
 
-  $scope.getId = function (prefix, parent, isLossAdjustment) {
-    if (isLossAdjustment != null && isLossAdjustment != isUndefined && isLossAdjustment) {
-      return prefix + "_" + parent.$parent.$parent.$index + "_" + parent.$parent.$parent.$parent.$index;
-    }
-    return prefix + "_" + parent.$parent.$parent.$index;
-  };
-
   $scope.hide = function () {
     return "";
   };
@@ -165,12 +158,6 @@
     $scope.modalError = '';
   };
 
-  $scope.showCurrencySymbol = function (value) {
-    if (value != 0 && (isUndefined(value) || value.length == 0 || value == false)) {
-      return "";
-    }
-    return "defined";
-  };
 
   $scope.showSelectedColumn = function (columnName) {
     if (($scope.rnr.status == "INITIATED" || $scope.rnr.status == "SUBMITTED") && columnName == "quantityApproved")
@@ -241,11 +228,30 @@
     return $scope.getCellErrorClass(rnrLineItem, programRnRColumnList) ? 'row-error-highlight' : '';
   };
 
-    function populateRnrLineItems(rnr) {
-        $(rnr.lineItems).each(function (i, lineItem) {
+
+  var currentIndex = 0;
+  var step = 20;
+  var interval = setInterval(function () {
+    appendMore();
+    $scope.$apply();
+  }, 100);
+
+  function appendMore() {
+    var rnr = $scope.rnr;
+    if($scope.rnr){
+      if (currentIndex >= 400) {
+            clearInterval(interval);
+          }
+          for (var x = currentIndex; x < currentIndex + step && x < 400 ; x++) {
+            var lineItem = rnr.lineItems[x];
             lineItem.cost = parseFloat((lineItem.packsToShip * lineItem.price).toFixed(2));
+
             var rnrLineItem = new RnrLineItem(lineItem);
+
             $scope.rnrLineItems.push(rnrLineItem);
-        });
-    }
+          }
+          currentIndex += step;
+    }
+
+  };
 }
Index: modules/upload/src/main/java/org/openlmis/upload/model/ModelClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.openlmis.upload.model;\n\nimport lombok.Getter;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.collections.ListUtils;\nimport org.apache.commons.collections.Predicate;\nimport org.openlmis.upload.Importable;\nimport org.openlmis.upload.annotation.ImportField;\nimport org.openlmis.upload.annotation.ImportFields;\nimport org.openlmis.upload.exception.UploadException;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ModelClass {\n  @Getter\n  private Class<? extends Importable> clazz;\n\n  private List<Field> importFields;\n\n  public ModelClass(Class<? extends Importable> clazz) {\n    this.clazz = clazz;\n    importFields = fieldsWithImportFieldAnnotation();\n  }\n\n  public void validateHeaders(List<String> headers) {\n    List<String> lowerCaseHeaders = lowerCase(headers);\n    validateInvalidHeaders(lowerCaseHeaders);\n    validateMandatoryFields(lowerCaseHeaders);\n\n  }\n\n  public String[] getFieldNameMappings(String[] headers) {\n    List<String> fieldMappings = new ArrayList<>();\n    for (String header : headers) {\n      Field importField = findImportFieldWithName(header);\n      if (importField != null) {\n        String nestedProperty = importField.getNested();\n        if (nestedProperty.isEmpty()) {\n          fieldMappings.add(importField.getField().getName());\n        } else {\n          fieldMappings.add(importField.getField().getName() + \".\" + nestedProperty);\n        }\n      }\n    }\n    return fieldMappings.toArray(new String[fieldMappings.size()]);\n  }\n\n  public Field findImportFieldWithName(final String name) {\n    Object result = CollectionUtils.find(importFields, new Predicate() {\n      @Override\n      public boolean evaluate(Object object) {\n        Field field = (Field) object;\n        if (field.hasName(name)) {\n          return true;\n        }\n        return false;\n      }\n    });\n    return (Field) result;\n  }\n\n  private List<Field> fieldsWithImportFieldAnnotation() {\n    List<java.lang.reflect.Field> fieldsList = Arrays.asList(clazz.getDeclaredFields());\n    List<Field> result = new ArrayList<>();\n    for (java.lang.reflect.Field field : fieldsList) {\n      if (field.isAnnotationPresent(ImportField.class)) {\n        result.add(new Field(field, field.getAnnotation(ImportField.class)));\n      }\n\n      if (field.isAnnotationPresent(ImportFields.class)) {\n        final ImportFields importFields = field.getAnnotation(ImportFields.class);\n        for (ImportField importField : importFields.importFields()) {\n          result.add(new Field(field, importField));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  private void validateMandatoryFields(List<String> headers) {\n    List<String> missingFields = findMissingFields(headers);\n\n    if (!missingFields.isEmpty()) {\n      throw new UploadException(\"Missing Mandatory columns in upload file: \" + missingFields);\n    }\n  }\n\n  private void validateInvalidHeaders(List<String> headers) {\n    List<String> fieldNames = getAllImportedFieldNames();\n    List invalidHeaders = ListUtils.subtract(headers, lowerCase(fieldNames));\n    if (!invalidHeaders.isEmpty()) {\n      throw new UploadException(\"Invalid Headers in upload file: \" + invalidHeaders);\n    }\n  }\n\n  private List<String> findMissingFields(List<String> headers) {\n    List<String> missingFields = new ArrayList<>();\n    for (Field field : importFields) {\n      if (field.isMandatory()) {\n        String fieldName = field.getName();\n        if (!headers.contains(fieldName.toLowerCase())) {\n          missingFields.add(fieldName);\n        }\n      }\n    }\n    return missingFields;\n  }\n\n  private List<String> lowerCase(List<String> headers) {\n    List<String> lowerCaseHeaders = new ArrayList<>();\n    for (String header : headers) {\n      lowerCaseHeaders.add(header.toLowerCase());\n    }\n    return lowerCaseHeaders;\n  }\n\n  private List<String> getAllImportedFieldNames() {\n    List<String> outputCollection = new ArrayList<>();\n    for (Field field : importFields) {\n      outputCollection.add(field.getName());\n    }\n    return outputCollection;\n  }\n}\n
===================================================================
--- modules/upload/src/main/java/org/openlmis/upload/model/ModelClass.java	(revision 83f4761be08f420a827bd4db1e316b79f0ad0bff)
+++ modules/upload/src/main/java/org/openlmis/upload/model/ModelClass.java	(revision )
@@ -52,11 +52,7 @@
       @Override
       public boolean evaluate(Object object) {
         Field field = (Field) object;
-        if (field.hasName(name)) {
-          return true;
-        }
-        return false;
-      }
+        return field.hasName(name);      }
     });
     return (Field) result;
   }
Index: modules/openlmis-web/src/main/webapp/public/js/rnr/model/rnr-line-item.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>var RnrLineItem = function (lineItem) {\n\n  this.rnrLineItem = lineItem;\n\n  this.arithmeticallyInvalid = function (programRnRColumnList) {\n\n    if (programRnRColumnList != undefined && programRnRColumnList[0].formulaValidated) {\n      var beginningBalance = parseIntWithBaseTen(this.rnrLineItem.beginningBalance,10);\n      var quantityReceived = parseIntWithBaseTen(this.rnrLineItem.quantityReceived);\n      var quantityDispensed = parseIntWithBaseTen(this.rnrLineItem.quantityDispensed);\n      var totalLossesAndAdjustments = parseIntWithBaseTen(this.rnrLineItem.totalLossesAndAdjustments);\n      var stockInHand = parseIntWithBaseTen(this.rnrLineItem.stockInHand);\n      return (isNumber(quantityDispensed) && isNumber(beginningBalance) && isNumber(quantityReceived) &&\n              isNumber(totalLossesAndAdjustments) && isNumber(stockInHand)) ?\n              quantityDispensed != (beginningBalance + quantityReceived + totalLossesAndAdjustments - stockInHand) : null;\n    }\n    return false;\n  };\n\n  function parseIntWithBaseTen(number){\n   return parseInt(number, 10);\n  }\n\n  this.reEvaluateTotalLossesAndAdjustments = function () {\n    var rnrLineItem = this.rnrLineItem;\n    rnrLineItem.totalLossesAndAdjustments = 0;\n\n    $(rnrLineItem.lossesAndAdjustments).each(function (index, lossAndAdjustmentObject) {\n      var quantity = parseIntWithBaseTen(lossAndAdjustmentObject.quantity, 10);\n      updateTotalLossesAndAdjustment(rnrLineItem, quantity, lossAndAdjustmentObject.type.additive);\n    });\n  };\n\n  this.removeLossAndAdjustment = function (lossAndAdjustmentToDelete) {\n    this.rnrLineItem.lossesAndAdjustments = $.grep(this.rnrLineItem.lossesAndAdjustments, function (lossAndAdjustmentObj) {\n      return lossAndAdjustmentObj != lossAndAdjustmentToDelete;\n    });\n    var quantity = parseIntWithBaseTen(lossAndAdjustmentToDelete.quantity, 10);\n    updateTotalLossesAndAdjustment(this.rnrLineItem, quantity, !lossAndAdjustmentToDelete.type.additive);\n  };\n\n  this.addLossAndAdjustment = function (newLossAndAdjustment) {\n    var lossAndAdjustment = {\"type\":newLossAndAdjustment.type, \"quantity\":newLossAndAdjustment.quantity};\n    newLossAndAdjustment.type = undefined;\n    newLossAndAdjustment.quantity = undefined;\n    this.rnrLineItem.lossesAndAdjustments.push(lossAndAdjustment);\n    var quantity = parseIntWithBaseTen(lossAndAdjustment.quantity, 10);\n    updateTotalLossesAndAdjustment(this.rnrLineItem, quantity, lossAndAdjustment.type.additive);\n  };\n\n  this.fill = function (rnr, programRnRColumnList) {\n    var rnrLineItem = this.rnrLineItem;\n\n    function fillConsumption() {\n      quantityDispensed = rnrLineItem.quantityDispensed = (isNumber(beginningBalance) && isNumber(quantityReceived) && isNumber(totalLossesAndAdjustments) && isNumber(stockInHand)) ? beginningBalance + quantityReceived + totalLossesAndAdjustments - stockInHand : null;\n    }\n\n    function fillStockInHand() {\n      stockInHand = rnrLineItem.stockInHand = (isNumber(beginningBalance) && isNumber(quantityReceived) && isNumber(quantityDispensed) && isNumber(totalLossesAndAdjustments)) ? beginningBalance + quantityReceived + totalLossesAndAdjustments - quantityDispensed : null;\n    }\n\n    var getSource = function (indicator) {\n      var code = null;\n      $(programRnRColumnList).each(function (i, column) {\n        if (column.indicator == indicator) {\n          code = column.source.name;\n          return false;\n        }\n      });\n      return code;\n    };\n\n    function fillNormalizedConsumption() {\n      var m = 3; // will be picked up from the database in future\n      var x = isNumber(rnrLineItem.stockOutDays) ? parseIntWithBaseTen(rnrLineItem.stockOutDays) : null;\n      var f = isNumber(rnrLineItem.newPatientCount) ? parseIntWithBaseTen(rnrLineItem.newPatientCount) : null;\n      if (getSource('F') == null) f = 0;\n\n      if (!isNumber(quantityDispensed) || !isNumber(x) || !isNumber(f)) {\n        rnrLineItem.normalizedConsumption = null;\n        return;\n      }\n\n      var dosesPerMonth = parseIntWithBaseTen(rnrLineItem.dosesPerMonth);\n      var g = parseIntWithBaseTen(rnrLineItem.dosesPerDispensingUnit);\n      var consumptionAdjustedWithStockOutDays = ((m * 30) - x) == 0 ? quantityDispensed : (quantityDispensed * ((m * 30) / ((m * 30) - x)));\n      var adjustmentForNewPatients = (f * Math.ceil(dosesPerMonth / g) ) * m;\n      lineItem.normalizedConsumption = Math.round(consumptionAdjustedWithStockOutDays + adjustmentForNewPatients);\n    }\n\n    function fillAMC() {\n      rnrLineItem.amc = rnrLineItem.normalizedConsumption;\n    }\n\n    function fillMaxStockQuantity() {\n      if (!isNumber(rnrLineItem.amc)) {\n        rnrLineItem.maxStockQuantity = null;\n        return;\n      }\n      rnrLineItem.maxStockQuantity = rnrLineItem.amc * rnrLineItem.maxMonthsOfStock;\n    }\n\n    function fillCalculatedOrderQuantity() {\n      if (!isNumber(rnrLineItem.maxStockQuantity) || !isNumber(rnrLineItem.stockInHand)) {\n        rnrLineItem.calculatedOrderQuantity = null;\n        return;\n      }\n      rnrLineItem.calculatedOrderQuantity = rnrLineItem.maxStockQuantity - rnrLineItem.stockInHand;\n      rnrLineItem.calculatedOrderQuantity < 0 ? (rnrLineItem.calculatedOrderQuantity = 0) : 0;\n    }\n\n    function applyRoundingRules(orderQuantity) {\n      var remainderQuantity = orderQuantity % parseIntWithBaseTen(rnrLineItem.packSize);\n      var packsToShip = rnrLineItem.packsToShip;\n      if (remainderQuantity >= rnrLineItem.packRoundingThreshold && packsToShip != 0) {\n        packsToShip += 1;\n      }\n\n      if (packsToShip == 0 && rnrLineItem.roundToZero == false) {\n        packsToShip = 1;\n      }\n      rnrLineItem.packsToShip = packsToShip;\n    }\n\n    function fillPacksToShip() {\n      var packSize = parseIntWithBaseTen(rnrLineItem.packSize);\n      var orderQuantity = rnrLineItem.quantityRequested == null ?\n          rnrLineItem.calculatedOrderQuantity : rnrLineItem.quantityRequested;\n\n      if (orderQuantity == null || !isNumber(orderQuantity)) {\n        rnrLineItem.packsToShip = null;\n        return;\n      }\n      rnrLineItem.packsToShip = Math.floor(orderQuantity / packSize);\n      applyRoundingRules(orderQuantity);\n    }\n\n    function fillCost() {\n      if (!isNumber(rnrLineItem.packsToShip)) {\n        rnrLineItem.cost = null;\n        return;\n      }\n      rnrLineItem.cost = parseFloat((rnrLineItem.packsToShip * rnrLineItem.price).toFixed(2));\n    }\n\n    function fillFullSupplyItemsSubmittedCost() {\n      if (rnr == null || rnr.lineItems == null) return;\n\n      var cost = 0;\n      var lineItems = rnr.lineItems;\n      for (var lineItemIndex in lineItems) {\n        var lineItem = lineItems[lineItemIndex];\n        if (!lineItem || lineItem.cost == null || !isNumber(lineItem.cost)) continue;\n        cost += lineItem.cost;\n      }\n      rnr.fullSupplyItemsSubmittedCost = cost;\n    }\n\n    var beginningBalance = parseIntWithBaseTen(rnrLineItem.beginningBalance);\n    var quantityReceived = parseIntWithBaseTen(rnrLineItem.quantityReceived);\n    var quantityDispensed = parseIntWithBaseTen(rnrLineItem.quantityDispensed);\n    var totalLossesAndAdjustments = parseIntWithBaseTen(rnrLineItem.totalLossesAndAdjustments);\n    var stockInHand = parseIntWithBaseTen(rnrLineItem.stockInHand);\n\n    if (getSource('C') == 'CALCULATED') fillConsumption();\n    if (getSource('E') == 'CALCULATED') fillStockInHand();\n    fillNormalizedConsumption();\n    fillAMC();\n    fillMaxStockQuantity();\n    fillCalculatedOrderQuantity();\n    fillPacksToShip();\n    fillCost();\n    fillFullSupplyItemsSubmittedCost();\n  };\n\n  var updateTotalLossesAndAdjustment = function (rnrLineItem, quantity, additive) {\n    if (!isNaN(quantity)) {\n      if (additive) {\n        rnrLineItem.totalLossesAndAdjustments += quantity;\n      } else {\n        rnrLineItem.totalLossesAndAdjustments -= quantity;\n      }\n    }\n  };\n\n  var isNumber = function (number) {\n    return !isNaN(parseIntWithBaseTen(number));\n  };\n\n  this.getErrorMessage = function(programRnRColumnList){\n    if(this.rnrLineItem.stockInHand < 0) return 'Stock On Hand is calculated to be negative, please validate entries';\n    if(this.rnrLineItem.quantityDispensed < 0) return 'Total Quantity Consumed is calculated to be negative, please validate entries';\n    if(this.arithmeticallyInvalid(programRnRColumnList)) return 'The entries are arithmetically invalid, please recheck';\n\n    return \"\";\n  }\n};\n\n
===================================================================
--- modules/openlmis-web/src/main/webapp/public/js/rnr/model/rnr-line-item.js	(revision 83f4761be08f420a827bd4db1e316b79f0ad0bff)
+++ modules/openlmis-web/src/main/webapp/public/js/rnr/model/rnr-line-item.js	(revision )
@@ -4,195 +4,40 @@
 
   this.arithmeticallyInvalid = function (programRnRColumnList) {
 
-    if (programRnRColumnList != undefined && programRnRColumnList[0].formulaValidated) {
-      var beginningBalance = parseIntWithBaseTen(this.rnrLineItem.beginningBalance,10);
-      var quantityReceived = parseIntWithBaseTen(this.rnrLineItem.quantityReceived);
-      var quantityDispensed = parseIntWithBaseTen(this.rnrLineItem.quantityDispensed);
-      var totalLossesAndAdjustments = parseIntWithBaseTen(this.rnrLineItem.totalLossesAndAdjustments);
-      var stockInHand = parseIntWithBaseTen(this.rnrLineItem.stockInHand);
-      return (isNumber(quantityDispensed) && isNumber(beginningBalance) && isNumber(quantityReceived) &&
-              isNumber(totalLossesAndAdjustments) && isNumber(stockInHand)) ?
-              quantityDispensed != (beginningBalance + quantityReceived + totalLossesAndAdjustments - stockInHand) : null;
-    }
     return false;
   };
 
-  function parseIntWithBaseTen(number){
+  function parseIntWithBaseTen(number) {
-   return parseInt(number, 10);
+    return parseInt(number, 10);
   }
 
   this.reEvaluateTotalLossesAndAdjustments = function () {
-    var rnrLineItem = this.rnrLineItem;
-    rnrLineItem.totalLossesAndAdjustments = 0;
-
-    $(rnrLineItem.lossesAndAdjustments).each(function (index, lossAndAdjustmentObject) {
-      var quantity = parseIntWithBaseTen(lossAndAdjustmentObject.quantity, 10);
-      updateTotalLossesAndAdjustment(rnrLineItem, quantity, lossAndAdjustmentObject.type.additive);
-    });
   };
 
   this.removeLossAndAdjustment = function (lossAndAdjustmentToDelete) {
-    this.rnrLineItem.lossesAndAdjustments = $.grep(this.rnrLineItem.lossesAndAdjustments, function (lossAndAdjustmentObj) {
-      return lossAndAdjustmentObj != lossAndAdjustmentToDelete;
-    });
-    var quantity = parseIntWithBaseTen(lossAndAdjustmentToDelete.quantity, 10);
-    updateTotalLossesAndAdjustment(this.rnrLineItem, quantity, !lossAndAdjustmentToDelete.type.additive);
   };
 
   this.addLossAndAdjustment = function (newLossAndAdjustment) {
-    var lossAndAdjustment = {"type":newLossAndAdjustment.type, "quantity":newLossAndAdjustment.quantity};
-    newLossAndAdjustment.type = undefined;
-    newLossAndAdjustment.quantity = undefined;
-    this.rnrLineItem.lossesAndAdjustments.push(lossAndAdjustment);
-    var quantity = parseIntWithBaseTen(lossAndAdjustment.quantity, 10);
-    updateTotalLossesAndAdjustment(this.rnrLineItem, quantity, lossAndAdjustment.type.additive);
   };
 
   this.fill = function (rnr, programRnRColumnList) {
-    var rnrLineItem = this.rnrLineItem;
-
-    function fillConsumption() {
-      quantityDispensed = rnrLineItem.quantityDispensed = (isNumber(beginningBalance) && isNumber(quantityReceived) && isNumber(totalLossesAndAdjustments) && isNumber(stockInHand)) ? beginningBalance + quantityReceived + totalLossesAndAdjustments - stockInHand : null;
-    }
-
-    function fillStockInHand() {
-      stockInHand = rnrLineItem.stockInHand = (isNumber(beginningBalance) && isNumber(quantityReceived) && isNumber(quantityDispensed) && isNumber(totalLossesAndAdjustments)) ? beginningBalance + quantityReceived + totalLossesAndAdjustments - quantityDispensed : null;
-    }
-
-    var getSource = function (indicator) {
-      var code = null;
-      $(programRnRColumnList).each(function (i, column) {
-        if (column.indicator == indicator) {
-          code = column.source.name;
-          return false;
-        }
-      });
-      return code;
-    };
+  };
 
-    function fillNormalizedConsumption() {
-      var m = 3; // will be picked up from the database in future
-      var x = isNumber(rnrLineItem.stockOutDays) ? parseIntWithBaseTen(rnrLineItem.stockOutDays) : null;
-      var f = isNumber(rnrLineItem.newPatientCount) ? parseIntWithBaseTen(rnrLineItem.newPatientCount) : null;
-      if (getSource('F') == null) f = 0;
-
-      if (!isNumber(quantityDispensed) || !isNumber(x) || !isNumber(f)) {
-        rnrLineItem.normalizedConsumption = null;
-        return;
-      }
-
-      var dosesPerMonth = parseIntWithBaseTen(rnrLineItem.dosesPerMonth);
-      var g = parseIntWithBaseTen(rnrLineItem.dosesPerDispensingUnit);
-      var consumptionAdjustedWithStockOutDays = ((m * 30) - x) == 0 ? quantityDispensed : (quantityDispensed * ((m * 30) / ((m * 30) - x)));
-      var adjustmentForNewPatients = (f * Math.ceil(dosesPerMonth / g) ) * m;
-      lineItem.normalizedConsumption = Math.round(consumptionAdjustedWithStockOutDays + adjustmentForNewPatients);
-    }
-
-    function fillAMC() {
-      rnrLineItem.amc = rnrLineItem.normalizedConsumption;
-    }
-
-    function fillMaxStockQuantity() {
-      if (!isNumber(rnrLineItem.amc)) {
-        rnrLineItem.maxStockQuantity = null;
-        return;
-      }
-      rnrLineItem.maxStockQuantity = rnrLineItem.amc * rnrLineItem.maxMonthsOfStock;
-    }
-
-    function fillCalculatedOrderQuantity() {
-      if (!isNumber(rnrLineItem.maxStockQuantity) || !isNumber(rnrLineItem.stockInHand)) {
-        rnrLineItem.calculatedOrderQuantity = null;
-        return;
-      }
-      rnrLineItem.calculatedOrderQuantity = rnrLineItem.maxStockQuantity - rnrLineItem.stockInHand;
-      rnrLineItem.calculatedOrderQuantity < 0 ? (rnrLineItem.calculatedOrderQuantity = 0) : 0;
-    }
-
-    function applyRoundingRules(orderQuantity) {
-      var remainderQuantity = orderQuantity % parseIntWithBaseTen(rnrLineItem.packSize);
-      var packsToShip = rnrLineItem.packsToShip;
-      if (remainderQuantity >= rnrLineItem.packRoundingThreshold && packsToShip != 0) {
-        packsToShip += 1;
-      }
-
-      if (packsToShip == 0 && rnrLineItem.roundToZero == false) {
-        packsToShip = 1;
-      }
-      rnrLineItem.packsToShip = packsToShip;
-    }
-
-    function fillPacksToShip() {
-      var packSize = parseIntWithBaseTen(rnrLineItem.packSize);
-      var orderQuantity = rnrLineItem.quantityRequested == null ?
-          rnrLineItem.calculatedOrderQuantity : rnrLineItem.quantityRequested;
-
-      if (orderQuantity == null || !isNumber(orderQuantity)) {
-        rnrLineItem.packsToShip = null;
-        return;
-      }
-      rnrLineItem.packsToShip = Math.floor(orderQuantity / packSize);
-      applyRoundingRules(orderQuantity);
-    }
-
-    function fillCost() {
-      if (!isNumber(rnrLineItem.packsToShip)) {
-        rnrLineItem.cost = null;
-        return;
-      }
-      rnrLineItem.cost = parseFloat((rnrLineItem.packsToShip * rnrLineItem.price).toFixed(2));
-    }
-
-    function fillFullSupplyItemsSubmittedCost() {
-      if (rnr == null || rnr.lineItems == null) return;
-
-      var cost = 0;
-      var lineItems = rnr.lineItems;
-      for (var lineItemIndex in lineItems) {
-        var lineItem = lineItems[lineItemIndex];
-        if (!lineItem || lineItem.cost == null || !isNumber(lineItem.cost)) continue;
-        cost += lineItem.cost;
-      }
-      rnr.fullSupplyItemsSubmittedCost = cost;
-    }
-
-    var beginningBalance = parseIntWithBaseTen(rnrLineItem.beginningBalance);
-    var quantityReceived = parseIntWithBaseTen(rnrLineItem.quantityReceived);
-    var quantityDispensed = parseIntWithBaseTen(rnrLineItem.quantityDispensed);
-    var totalLossesAndAdjustments = parseIntWithBaseTen(rnrLineItem.totalLossesAndAdjustments);
-    var stockInHand = parseIntWithBaseTen(rnrLineItem.stockInHand);
-
-    if (getSource('C') == 'CALCULATED') fillConsumption();
-    if (getSource('E') == 'CALCULATED') fillStockInHand();
-    fillNormalizedConsumption();
-    fillAMC();
-    fillMaxStockQuantity();
-    fillCalculatedOrderQuantity();
-    fillPacksToShip();
-    fillCost();
-    fillFullSupplyItemsSubmittedCost();
-  };
-
   var updateTotalLossesAndAdjustment = function (rnrLineItem, quantity, additive) {
-    if (!isNaN(quantity)) {
-      if (additive) {
-        rnrLineItem.totalLossesAndAdjustments += quantity;
-      } else {
-        rnrLineItem.totalLossesAndAdjustments -= quantity;
-      }
-    }
   };
 
   var isNumber = function (number) {
     return !isNaN(parseIntWithBaseTen(number));
   };
 
-  this.getErrorMessage = function(programRnRColumnList){
-    if(this.rnrLineItem.stockInHand < 0) return 'Stock On Hand is calculated to be negative, please validate entries';
-    if(this.rnrLineItem.quantityDispensed < 0) return 'Total Quantity Consumed is calculated to be negative, please validate entries';
-    if(this.arithmeticallyInvalid(programRnRColumnList)) return 'The entries are arithmetically invalid, please recheck';
 
-    return "";
+
+
+
+
+  function isUndefined(value) {
+    return (value == null || value == undefined);
   }
+
 };
 
Index: modules/core/src/main/java/org/openlmis/core/domain/ProgramProductCost.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/core/src/main/java/org/openlmis/core/domain/ProgramProductCost.java	(revision )
+++ modules/core/src/main/java/org/openlmis/core/domain/ProgramProductCost.java	(revision )
@@ -0,0 +1,19 @@
+package org.openlmis.core.domain;
+
+import lombok.Data;
+import org.openlmis.upload.Importable;
+import org.openlmis.upload.annotation.ImportField;
+
+@Data
+public class ProgramProductCost implements Importable {
+  @ImportField(name = "Program Code", type = "String", nested = "code", mandatory = true)
+  private Program program;
+  @ImportField(name = "Product Code", type = "String", nested = "code", mandatory = true)
+  private Product product;
+  @ImportField(name = "Price per pack", type = "double", mandatory = true)
+  private Double pricePerPack;
+  @ImportField(name = "Price per dosage unit", type = "double")
+  private Double pricePerDosage;
+  @ImportField(name = "Funding Source", type = "String")
+  private String source;
+}
Index: modules/openlmis-web/src/main/webapp/public/pages/logistics/rnr/partials/form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div ng-controller=\"CreateRnrController\" >\n<div ng-hide=\"programRnRColumnList\">Loading...</div>\n<form name=\"saveRnrForm\" ng-submit=\"submitRnr()\" id=\"rnr-form\" novalidate >\n<div class=\"total-cost alert alert-info\">Total R&amp;R Cost:\n<span id=\"totalCostCurrency\" class=\"cell-text\">\n                                           {{currency}}\n                       </span>\n                       <span id=\"totalCost\" class=\"cell-text\"> {{rnr.fullSupplyItemsSubmittedCost + rnr.nonFullSupplyItemsSubmittedCost | number:2}}\n                       </span>\n   </div>\n<div class=\"rnr-table\">\n           <table class=\"table table-striped table-bordered\">\n               <thead>\n               <tr>\n                   <th class=\"col-{{programRnrColumn.name}}\" ng-repeat=\"programRnrColumn in programRnRColumnList\" ng-hide=\"programRnrColumn.name == 'quantityApproved'\">\n                       {{programRnrColumn.label}}\n                   </th>\n               </tr>\n               </thead>\n               <tbody ng-show=\"programRnRColumnList && (rnr.lineItems.length > 0)\">\n          <tr ng-repeat = \"rnrLineItem in rnrLineItems\" ng-class=\"getRowErrorClass(rnrLineItem,programRnRColumnList)\">\n            <td class = \"cell-input\" ng-repeat = \"column in programRnRColumnList\"\n                ng-hide = \"column.name == 'quantityApproved'\" >\n                       <ng-switch on=\"column.source.name\">\n                           <span ng-switch-when=\"USER_INPUT\">\n                               <ng-switch on=\"column.name\">\n                         <span ng-switch-when = \"beginningBalance\" ng-class=\"getCellErrorClass(rnrLineItem, programRnRColumnList)\">\n                                     <input  id=\"{{getId('A', $parent)}}\" type=\"text\"\n                                             ng-required=\"true\" ng-disabled=\"formDisabled\"\n                                            name=\"beginningBalance{{rnrLineItem.rnrLineItem['id']}}\"\n                                            ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                            rnr-validator=\"positiveInteger\" maxlength=\"8\"\n                                            ng-change=\"rnrLineItem.fill(rnr, programRnRColumnList)\" ng-class=\"highlightRequired(rnrLineItem.rnrLineItem[column.name])\"/>\n                                     <span class=\"rnr-form-error\" id=\"beginningBalance{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                      Enter Numeric Data\n                                     </span>\n                           <span class=\"row-specific-error\" ng-show=\"rnrLineItem.getErrorMessage(programRnRColumnList)\" style=\"background: red;\">\n                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}\n                                <span class=\"beak-down\"></span>\n                                   </span>\n                         </span>\n\n                         <span ng-switch-when = \"quantityReceived\" ng-class=\"getCellErrorClass(rnrLineItem, programRnRColumnList)\" >\n                             <input ng-required = \"true\" ng-disabled = \"formDisabled\"\n                                    id = \"{{getId('B', $parent)}}\" type = \"text\"\n                                              name=\"quantityReceived{{rnrLineItem.rnrLineItem['id']}}\"\n                                              ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                              rnr-validator=\"positiveInteger\" maxlength=\"8\"\n                                              ng-change=\"rnrLineItem.fill(rnr, programRnRColumnList)\"\n                                              ng-class=\"highlightRequired(rnrLineItem.rnrLineItem[column.name])\"/>\n                                       <span class=\"rnr-form-error\" id=\"quantityReceived{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                        Enter Numeric Data\n                                       </span>\n                            <span class=\"row-specific-error\" ng-show=\"rnrLineItem.getErrorMessage(programRnRColumnList)\" style=\"background: red;\">\n                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}\n                                <span class=\"beak-down\"></span>\n                                   </span>\n                         </span >\n\n                         <span ng-switch-when = \"quantityDispensed\" ng-class=\"getCellErrorClass(rnrLineItem, programRnRColumnList)\" >\n                           <input ng-required = \"true\" ng-disabled = \"formDisabled\"\n                                  id = \"{{getId('C', $parent)}}\" type = \"text\"\n                                            name=\"quantityDispensed{{rnrLineItem.rnrLineItem['id']}}\"\n                                            ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                            rnr-validator=\"positiveInteger\"\n                                            ng-change=\"rnrLineItem.fill(rnr, programRnRColumnList)\"\n                                            maxlength=\"8\"\n                                            ng-class=\"highlightRequired(rnrLineItem.rnrLineItem[column.name])\"/>\n                                     <span class=\"rnr-form-error\" id=\"quantityDispensed{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                      Enter Numeric Data\n                                     </span>\n                            <span class=\"row-specific-error\" ng-show=\"rnrLineItem.getErrorMessage(programRnRColumnList)\" style=\"background: red;\">\n                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}\n                                <span class=\"beak-down\"></span>\n                                   </span>\n                         </span >\n\n                                   <span ng-switch-when=\"lossesAndAdjustments\">\n                                       <div id=\"lossesAndAdjustments\"\n                                            class=\"fade ng-pristine ng-valid modal hide adjustments-modal\" ui-modal\n                                            ng-model=\"lossesAndAdjustmentsModal[rnrLineItem.rnrLineItem.id]\"\n                                            data-backdrop=\"static\" data-keyboard=\"false\">\n                                       <div class=\"modal-header\"><h3>Losses And Adjustments</h3></div>\n                                       <div class=\"modal-body\">\n                                         <div class=\"adjustment-field\">\n                                           <h5>Add new Loss/Adjustment</h5>\n\n                                                   <div class=\"row-fluid\">\n                                                       <div class=\"span5\">\n                                                           <select ng-disabled=\"formDisabled\"\n                                                                   ng-model=\"lossAndAdjustment.type\"\n                                                                   ng-options=\"i as i.description for i in lossesAndAdjustmentTypesToDisplay\">\n                                             <option value=\"\">--Select Type--</option>\n                                           </select>\n                                                       </div>\n                                                       <div class=\"span3\">\n                                                           <input ng-disabled=\"formDisabled\" type=\"text\"\n                                                                  name=\"quantity{{rnrLineItem.rnrLineItem.id}}\"\n                                                                  ng-model=\"lossAndAdjustment.quantity\"\n                                                                  rnr-validator=\"positiveInteger\" prevent-rnr-error=\"true\" maxlength=\"8\"\n                                                                  placeholder=\"Quantity\"/>\n\n                                         <div class=\"rnr-form-error\"\n                                              id=\"quantity{{rnrLineItem.rnrLineItem.id}}\"\n                                               style=\"display:none;\">\n                                                       Enter Numeric Data\n                                                       </div>\n                                                       </div>\n                                                       <div class=\"span4\">\n                                                           <input type=\"button\"\n                                                                  ng-click=\"addLossAndAdjustment(rnrLineItem,lossAndAdjustment)\"\n                                                  ng-disabled=\"!(lossAndAdjustment.type && lossAndAdjustment.quantity)\"\n                                                  class=\"btn btn-primary\" value=\"Add\" />\n                                         </div>\n                                                   </div>\n\n\n                                               </div>\n                                         <hr ng-show=\"rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0\" />\n                                         <div class=\"adjustment-list\" ng-show=\"rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0\">\n                                           <ul>\n                                             <li ng-repeat=\"oneLossAndAdjustment in rnrLineItem.rnrLineItem.lossesAndAdjustments\" class=\"clearfix\">\n                                               <span class=\"tpl-adjustment-type\">\n                                                 {{oneLossAndAdjustment.type.description}}\n                                               </span>\n                                               <span class=\"tpl-adjustment-delete\">\n                                                 <a class=\"close\"\n                                                    ng-click=\"removeLossAndAdjustment(rnrLineItem,oneLossAndAdjustment)\">&times;</a>\n                                               </span>\n                                               <span class=\"tpl-adjustment-qty\">\n                                                     <input ng-required=\"true\"\n                                                            ng-disabled=\"formDisabled\"\n                                                            id=\"{{getId('D', $parent, true)}}\"\n                                                            name=\"{{oneLossAndAdjustment.type.displayOrder}}\"\n                                                              type=\"text\"\n                                                              ng-model=\"oneLossAndAdjustment.quantity\"\n                                                            ng-change=\"rnrLineItem.reEvaluateTotalLossesAndAdjustments(); resetModalError()\"\n                                                              rnr-validator=\"positiveInteger\"\n                                                              maxlength=\"8\"\n                                                            ng-class=\"highlightRequiredFieldInModal(oneLossAndAdjustment.quantity)\"\n                                                            data-keyboard=\"false\"\n                                                              />\n                                                     <div class=\"rnr-form-error\"\n                                                          id=\"{{oneLossAndAdjustment.type.displayOrder}}\"\n                                                       style=\"display:none;\">\n                                                       Enter Numeric Data\n                                                     </div>\n                                                       </span>\n                                             </li>\n                                           </ul>\n                                         </div>\n\n                                         <div class=\"adjustment-total clearfix alert alert-warning\" ng-show=\"rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0\">\n                                           <span class=\"pull-left\">Total</span> {{rnrLineItem.rnrLineItem.totalLossesAndAdjustments}}\n                                         </div>\n                                               <div class=\"alert alert-danger\" id=\"modalErrorMessage\"\n                                                    ng-model=\"modalError\"\n                                                    ng-show=\"rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0 && modalError\">\n                                                   {{modalError}}\n                                       </div>\n                                           </div>\n                                       <div class=\"modal-footer\">\n\n                                               <input type=\"button\" class=\"btn btn-success save-button\"\n                                                      ng-click=\"saveLossesAndAdjustmentsForRnRLineItem(rnrLineItem, rnr, programRnRColumnList)\"\n                                                      value=\"Done\"/>\n                                       </div>\n                                   </div>\n                                          <div ng-class=\"highlightNestedFieldsWithError(rnrLineItem.rnrLineItem[column.name], 'quantity')\">\n                                              <a ng-click=\"showLossesAndAdjustmentModalForLineItem(rnrLineItem.rnrLineItem)\"\n                                                 class=\"rnr-adjustment\">\n                                            <span class=\"adjustment-value\">\n                                          {{rnrLineItem.rnrLineItem.totalLossesAndAdjustments}}</span>\n                                      </a>\n                                          </div>\n                                   </span>\n\n\n                         <span ng-switch-when = \"stockInHand\" ng-class=\"getCellErrorClass(rnrLineItem, programRnRColumnList)\">\n                           <input ng-required = \"true\" ng-disabled = \"formDisabled\"\n                                  id = \"{{getId('E', $parent)}}\" type = \"text\"\n                                  name = \"stockInHand{{rnrLineItem.rnrLineItem['id']}}\"\n                                            ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                            rnr-validator=\"positiveInteger\"\n                                            ng-change=\"rnrLineItem.fill(rnr, programRnRColumnList)\" maxlength=\"8\"\n                                            ng-class=\"highlightRequired(rnrLineItem.rnrLineItem[column.name])\"/>\n                                     <span class=\"rnr-form-error\" id=\"stockInHand{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                      Enter Numeric Data\n                                     </span>\n                            <span class=\"row-specific-error\" ng-show=\"rnrLineItem.getErrorMessage(programRnRColumnList)\" style=\"background: red;\">\n                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}\n                                <span class=\"beak-down\"></span>\n                                   </span>\n                         </span >\n\n                                   <span ng-switch-when=\"newPatientCount\">\n                                     <input ng-required=\"true\" ng-disabled=\"formDisabled\" id=\"{{getId('F', $parent)}}\" type=\"text\"\n                                            name=\"newPatientCount{{rnrLineItem.rnrLineItem['id']}}\"\n                                            ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                            rnr-validator=\"positiveInteger\" maxlength=\"8\"\n                                            ng-change=\"rnrLineItem.fill(rnr, programRnRColumnList)\"\n                                            ng-class=\"highlightRequired(rnrLineItem.rnrLineItem[column.name])\"/>\n                                     <span class=\"rnr-form-error\" id=\"newPatientCount{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                      Enter Numeric Data\n                                     </span>\n                                   </span>\n\n                                   <span ng-switch-when=\"quantityRequested\">\n                                     <input ng-disabled=\"formDisabled\" id=\"{{getId('J', $parent)}}\" type=\"text\"\n                                            name=\"quantityRequested{{rnrLineItem.rnrLineItem['id']}}\"\n                                            ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                            rnr-validator=\"positiveInteger\" maxlength=\"8\"\n                                            ng-change=\"rnrLineItem.fill(rnr, programRnRColumnList)\"/>\n                                     <span class=\"rnr-form-error\" id=\"quantityRequested{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                      Enter Numeric Data\n                                     </span>\n                                   </span>\n\n                                   <span ng-switch-when=\"quantityApproved\">\n                                     <input  id=\"{{getId('K', $parent)}}\" type=\"text\"\n                                            name=\"quantityApproved{{rnrLineItem.rnrLineItem['id']}}\"\n                                            ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                            rnr-validator=\"positiveInteger\" maxlength=\"8\"/>\n                                     <span class=\"rnr-form-error\" id=\"quantityApproved{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                      Enter Numeric Data\n                                     </span>\n                                   </span>\n\n                                   <span ng-switch-when=\"remarks\">\n                                       <input ng-disabled=\"formDisabled\" id=\"{{getId('L', $parent)}}\" type=\"text\" name=\"remarks{{rnrLineItem.rnrLineItem['id']}}\"\n                                             ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                             maxlength=\"250\"/>\n                                   </span>\n\n\n                                   <span ng-switch-when=\"reasonForRequestedQuantity\">\n                                       <input ng-disabled=\"formDisabled\" id=\"{{getId('W', $parent)}}\" type=\"text\"\n                                            name=\"reasonForRequestedQuantity{{rnrLineItem.rnrLineItem['id']}}\"\n                                            ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                            ng-required=\"rnrLineItem.rnrLineItem.quantityRequested\"\n                                            ng-class=\"highlightWarning(rnrLineItem.rnrLineItem[column.name],$parent.$parent.$parent.$index )\"\n                                            maxlength=\"250\"/>\n                                          <span class=\"alert alert-warning reason-request\" ng-show=\"rnrLineItem.rnrLineItem.quantityRequested && !rnrLineItem.rnrLineItem.reasonForRequestedQuantity\">\n                                          Please enter a reason\n                                        </span>\n                                   </span>\n\n                                   <span ng-switch-when=\"stockOutDays\">\n                                       <input ng-required=\"true\" ng-disabled=\"formDisabled\" id=\"{{getId('X', $parent)}}\" type=\"text\" name=\"stockOutDays{{rnrLineItem.rnrLineItem['id']}}\"\n                                       ng-model=\"rnrLineItem.rnrLineItem[column.name]\"\n                                       rnr-validator=\"positiveInteger\" maxlength=\"8\"\n                                       ng-change=\"rnrLineItem.fill(rnr, programRnRColumnList)\"\n                                       ng-class=\"highlightRequired(rnrLineItem.rnrLineItem[column.name])\"/>\n                                       <span class=\"rnr-form-error\" id=\"stockOutDays{{rnrLineItem.rnrLineItem['id']}}\" style=\"display:none;\">\n                                       Enter Numeric Data\n                                       </span>\n                                   </span>\n                               </ng-switch>\n                           </span>\n                           <span ng-switch-default>\n                               <ng-switch on=\"column.name\">\n                                   <span ng-switch-when = \"stockInHand\" ng-class=\"getCellErrorClass(rnrLineItem, programRnRColumnList)\">\n                                     <span id = \"{{column.indicator+'_'+$parent.$parent.$index}}\"\n                                           ng-bind = \"rnrLineItem.rnrLineItem[column.name]\"\n                                           class = \"cell-text\" >\n                                     </span >\n                                      <span class=\"row-specific-error\" ng-show=\"rnrLineItem.getErrorMessage(programRnRColumnList)\" style=\"background: red;\">\n                                       {{rnrLineItem.getErrorMessage(programRnRColumnList)}}\n                                           <span class=\"beak-down\"></span>\n                                      </span >\n                                   </span>\n                                   <span ng-switch-when=\"price\">\n                                       <span id=\"{{'priceCurrency_'+$parent.$parent.$index}}\" class=\"cell-text\" ng-show=\"showCurrencySymbol(rnrLineItem.rnrLineItem[column.name])\">\n                                           {{currency}}\n                                       </span>\n                                       <span id=\"{{column.indicator+'_'+$parent.$parent.$index}}\" ng-bind=\"rnrLineItem.rnrLineItem[column.name]\"\n                                           class=\"cell-text\">\n                                       </span>\n                                   </span>\n                                   <span ng-switch-when=\"cost\">\n                                       <span id=\"{{'costCurrency_'+$parent.$parent.$index}}\" class=\"cell-text\" ng-show=\"showCurrencySymbol(rnrLineItem.rnrLineItem[column.name])\" >\n                                           {{currency}}\n                                       </span>\n                                       <span id=\"{{column.indicator+'_'+$parent.$parent.$index}}\" ng-bind=\"rnrLineItem.rnrLineItem[column.name]\"\n                                           class=\"cell-text\">\n                                       </span>\n                                   </span>\n                                    <span id=\"{{column.indicator+'_'+$parent.$parent.$index}}\" ng-bind=\"rnrLineItem.rnrLineItem[column.name]\"\n                                          class=\"cell-text\" ng-switch-default>\n                                    </span>\n                               </ng-switch>\n                           </span>\n                       </ng-switch>\n                   </td>\n               </tr>\n               </tbody>\n           </table>\n   </div>\n   <br />\n\n  <div id=\"action_buttons\" class=\"action-buttons\">\n      <div class=\"form-cell button-row\">\n        <input ng-disabled=\"formDisabled\" type=\"button\" ng-click=\"saveRnr()\" class=\"btn btn-primary save-button\" value=\"Save\"/>\n        <input ng-show=\"rnr.status == 'INITIATED' && hasPermission('CREATE_REQUISITION')\" ng-disabled=\"formDisabled\" type=\"submit\" class=\"btn btn-success submit-button\" value=\"Submit\"/>\n        <input type=\"button\" ng-show=\"(rnr.status == 'SUBMITTED' || rnr.status == 'AUTHORIZED') && hasPermission('AUTHORIZE_REQUISITION')\"\n               ng-disabled=\"rnr.status == 'AUTHORIZED'\" ng-click=\"authorizeRnr()\" class=\"btn btn-success submit-button\" value=\"Authorize\"/>\n      </div>\n  <div class=\"toolbar-error\" id=\"saveFailMessage\" ng-model=\"error\" ng-show=\"error && !submitError && !submitMessage\">\n    {{error}}\n  </div>\n    <div class=\"toolbar-error\" id=\"submitFailMessage\" ng-model=\"submitError\" ng-show=\"submitError\">\n      {{submitError}}\n    </div>\n  <div class=\"toolbar-success\" id=\"saveSuccessMsgDiv\" ng-model=\"message\" ng-show=\"!submitMessage && !submitError && message\">\n    {{message}}\n  </div>\n    <div class=\"toolbar-success\" id=\"submitSuccessMsgDiv\" ng-model=\"submitMessage\" ng-show=\"submitMessage\">\n      {{submitMessage}}\n    </div>\n   </div>\n</form>\n </div>\n
===================================================================
--- modules/openlmis-web/src/main/webapp/public/pages/logistics/rnr/partials/form.html	(revision 83f4761be08f420a827bd4db1e316b79f0ad0bff)
+++ modules/openlmis-web/src/main/webapp/public/pages/logistics/rnr/partials/form.html	(revision )
@@ -1,125 +1,128 @@
-<div ng-controller="CreateRnrController" >
+<div ng-controller="CreateRnrController">
 <div ng-hide="programRnRColumnList">Loading...</div>
-<form name="saveRnrForm" ng-submit="submitRnr()" id="rnr-form" novalidate >
+<form name="saveRnrForm" ng-submit="submitRnr()" id="rnr-form" novalidate>
 <div class="total-cost alert alert-info">Total R&amp;R Cost:
 <span id="totalCostCurrency" class="cell-text">
                                            {{currency}}
                        </span>
                        <span id="totalCost" class="cell-text"> {{rnr.fullSupplyItemsSubmittedCost + rnr.nonFullSupplyItemsSubmittedCost | number:2}}
                        </span>
-   </div>
+</div>
-<div class="rnr-table">
+<div class="rnr-table" >
-           <table class="table table-striped table-bordered">
-               <thead>
-               <tr>
+<table class="table table-striped table-bordered">
+<thead>
+<tr>
-                   <th class="col-{{programRnrColumn.name}}" ng-repeat="programRnrColumn in programRnRColumnList" ng-hide="programRnrColumn.name == 'quantityApproved'">
+  <th class="col-{{programRnrColumn.name}}" ng-repeat="programRnrColumn in programRnRColumnList"
+      ng-hide="programRnrColumn.name == 'quantityApproved'">
-                       {{programRnrColumn.label}}
-                   </th>
-               </tr>
-               </thead>
+    {{programRnrColumn.label}}
+  </th>
+</tr>
+</thead>
-               <tbody ng-show="programRnRColumnList && (rnr.lineItems.length > 0)">
+<tbody ng-show="programRnRColumnList && (rnr.lineItems.length > 0)"  >
-          <tr ng-repeat = "rnrLineItem in rnrLineItems" ng-class="getRowErrorClass(rnrLineItem,programRnRColumnList)">
+<tr  ng-repeat="rnrLineItem in rnrLineItems">
-            <td class = "cell-input" ng-repeat = "column in programRnRColumnList"
+<td class="cell-input " ng-repeat="column in programRnRColumnList"
-                ng-hide = "column.name == 'quantityApproved'" >
+    ng-hide="column.name == 'quantityApproved'">
-                       <ng-switch on="column.source.name">
-                           <span ng-switch-when="USER_INPUT">
+<ng-switch on="column.source.name">
+<span ng-switch-when="USER_INPUT">
                                <ng-switch on="column.name">
-                         <span ng-switch-when = "beginningBalance" ng-class="getCellErrorClass(rnrLineItem, programRnRColumnList)">
-                                     <input  id="{{getId('A', $parent)}}" type="text"
+                               <span ng-switch-when="beginningBalance">
+                                     <input type="text"
+                                            ng-model-onblur
-                                             ng-required="true" ng-disabled="formDisabled"
+                                            ng-required="true" ng-disabled="formDisabled"
                                             name="beginningBalance{{rnrLineItem.rnrLineItem['id']}}"
                                             ng-model="rnrLineItem.rnrLineItem[column.name]"
                                             rnr-validator="positiveInteger" maxlength="8"
-                                            ng-change="rnrLineItem.fill(rnr, programRnRColumnList)" ng-class="highlightRequired(rnrLineItem.rnrLineItem[column.name])"/>
-                                     <span class="rnr-form-error" id="beginningBalance{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                            ui-event="{ blur : 'rnrLineItem.fill(rnr, programRnRColumnList)' }"
+                                            ng-class=""/>
+                                     <span class="rnr-form-error" id="beginningBalance{{rnrLineItem.rnrLineItem['id']}}"
+                                           style="display:none;">
                                       Enter Numeric Data
                                      </span>
-                           <span class="row-specific-error" ng-show="rnrLineItem.getErrorMessage(programRnRColumnList)" style="background: red;">
-                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}
-                                <span class="beak-down"></span>
+
-                                   </span>
+                         </span>
-                         </span>
 
-                         <span ng-switch-when = "quantityReceived" ng-class="getCellErrorClass(rnrLineItem, programRnRColumnList)" >
+                         <span ng-switch-when="quantityReceived">
-                             <input ng-required = "true" ng-disabled = "formDisabled"
+                             <input ng-required="true" ng-disabled="formDisabled"
-                                    id = "{{getId('B', $parent)}}" type = "text"
+                                    type="text" ng-model-onblur
-                                              name="quantityReceived{{rnrLineItem.rnrLineItem['id']}}"
-                                              ng-model="rnrLineItem.rnrLineItem[column.name]"
-                                              rnr-validator="positiveInteger" maxlength="8"
+                                    name="quantityReceived{{rnrLineItem.rnrLineItem['id']}}"
+                                    ng-model="rnrLineItem.rnrLineItem[column.name]"
+                                    rnr-validator="positiveInteger" maxlength="8"
-                                              ng-change="rnrLineItem.fill(rnr, programRnRColumnList)"
-                                              ng-class="highlightRequired(rnrLineItem.rnrLineItem[column.name])"/>
-                                       <span class="rnr-form-error" id="quantityReceived{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                    ui-event="{ blur : 'rnrLineItem.fill(rnr, programRnRColumnList)' }"
+                                    ng-class=""/>
+                                       <span class="rnr-form-error"
+                                             id="quantityReceived{{rnrLineItem.rnrLineItem['id']}}"
+                                             style="display:none;">
                                         Enter Numeric Data
                                        </span>
-                            <span class="row-specific-error" ng-show="rnrLineItem.getErrorMessage(programRnRColumnList)" style="background: red;">
-                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}
-                                <span class="beak-down"></span>
+
-                                   </span>
+                         </span>
-                         </span >
 
-                         <span ng-switch-when = "quantityDispensed" ng-class="getCellErrorClass(rnrLineItem, programRnRColumnList)" >
+                         <span ng-switch-when="quantityDispensed">
-                           <input ng-required = "true" ng-disabled = "formDisabled"
+                           <input ng-required="true" ng-disabled="formDisabled"
-                                  id = "{{getId('C', $parent)}}" type = "text"
+                                  type="text" ng-model-onblur
-                                            name="quantityDispensed{{rnrLineItem.rnrLineItem['id']}}"
-                                            ng-model="rnrLineItem.rnrLineItem[column.name]"
-                                            rnr-validator="positiveInteger"
+                                  name="quantityDispensed{{rnrLineItem.rnrLineItem['id']}}"
+                                  ng-model="rnrLineItem.rnrLineItem[column.name]"
+                                  rnr-validator="positiveInteger"
-                                            ng-change="rnrLineItem.fill(rnr, programRnRColumnList)"
+                                  ui-event="{ blur : 'rnrLineItem.fill(rnr, programRnRColumnList)' }"
-                                            maxlength="8"
+                                  maxlength="8"
-                                            ng-class="highlightRequired(rnrLineItem.rnrLineItem[column.name])"/>
-                                     <span class="rnr-form-error" id="quantityDispensed{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                  ng-class=""/>
+                                     <span class="rnr-form-error"
+                                           id="quantityDispensed{{rnrLineItem.rnrLineItem['id']}}"
+                                           style="display:none;">
                                       Enter Numeric Data
                                      </span>
-                            <span class="row-specific-error" ng-show="rnrLineItem.getErrorMessage(programRnRColumnList)" style="background: red;">
-                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}
-                                <span class="beak-down"></span>
+
-                                   </span>
+                         </span>
-                         </span >
 
                                    <span ng-switch-when="lossesAndAdjustments">
                                        <div id="lossesAndAdjustments"
                                             class="fade ng-pristine ng-valid modal hide adjustments-modal" ui-modal
                                             ng-model="lossesAndAdjustmentsModal[rnrLineItem.rnrLineItem.id]"
                                             data-backdrop="static" data-keyboard="false">
-                                       <div class="modal-header"><h3>Losses And Adjustments</h3></div>
-                                       <div class="modal-body">
-                                         <div class="adjustment-field">
-                                           <h5>Add new Loss/Adjustment</h5>
+                                         <div class="modal-header"><h3>Losses And Adjustments</h3></div>
+                                         <div class="modal-body">
+                                           <div class="adjustment-field">
+                                             <h5>Add new Loss/Adjustment</h5>
 
-                                                   <div class="row-fluid">
-                                                       <div class="span5">
-                                                           <select ng-disabled="formDisabled"
-                                                                   ng-model="lossAndAdjustment.type"
-                                                                   ng-options="i as i.description for i in lossesAndAdjustmentTypesToDisplay">
-                                             <option value="">--Select Type--</option>
-                                           </select>
-                                                       </div>
-                                                       <div class="span3">
-                                                           <input ng-disabled="formDisabled" type="text"
-                                                                  name="quantity{{rnrLineItem.rnrLineItem.id}}"
-                                                                  ng-model="lossAndAdjustment.quantity"
+                                             <div class="row-fluid">
+                                               <div class="span5">
+                                                 <select ng-disabled="formDisabled"
+                                                         ng-model="lossAndAdjustment.type"
+                                                         ng-options="i as i.description for i in lossesAndAdjustmentTypesToDisplay">
+                                                   <option value="">--Select Type--</option>
+                                                 </select>
+                                               </div>
+                                               <div class="span3">
+                                                 <input ng-disabled="formDisabled" type="text"
+                                                        name="quantity{{rnrLineItem.rnrLineItem.id}}"
+                                                        ng-model="lossAndAdjustment.quantity"
-                                                                  rnr-validator="positiveInteger" prevent-rnr-error="true" maxlength="8"
+                                                        rnr-validator="positiveInteger" prevent-rnr-error="true"
+                                                        maxlength="8"
-                                                                  placeholder="Quantity"/>
+                                                        placeholder="Quantity"/>
 
-                                         <div class="rnr-form-error"
-                                              id="quantity{{rnrLineItem.rnrLineItem.id}}"
-                                               style="display:none;">
-                                                       Enter Numeric Data
-                                                       </div>
-                                                       </div>
-                                                       <div class="span4">
-                                                           <input type="button"
-                                                                  ng-click="addLossAndAdjustment(rnrLineItem,lossAndAdjustment)"
-                                                  ng-disabled="!(lossAndAdjustment.type && lossAndAdjustment.quantity)"
+                                                 <div class="rnr-form-error"
+                                                      id="quantity{{rnrLineItem.rnrLineItem.id}}"
+                                                      style="display:none;">
+                                                   Enter Numeric Data
+                                                 </div>
+                                               </div>
+                                               <div class="span4">
+                                                 <input type="button"
+                                                        ng-click="addLossAndAdjustment(rnrLineItem,lossAndAdjustment)"
+                                                        ng-disabled="!(lossAndAdjustment.type && lossAndAdjustment.quantity)"
-                                                  class="btn btn-primary" value="Add" />
+                                                        class="btn btn-primary" value="Add"/>
-                                         </div>
-                                                   </div>
+                                               </div>
+                                             </div>
 
 
-                                               </div>
+                                           </div>
-                                         <hr ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0" />
+                                           <hr ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0"/>
-                                         <div class="adjustment-list" ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0">
+                                           <div class="adjustment-list"
+                                                ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0">
-                                           <ul>
+                                             <ul>
-                                             <li ng-repeat="oneLossAndAdjustment in rnrLineItem.rnrLineItem.lossesAndAdjustments" class="clearfix">
+                                               <li
+                                                 ng-repeat="oneLossAndAdjustment in rnrLineItem.rnrLineItem.lossesAndAdjustments"
+                                                 class="clearfix">
                                                <span class="tpl-adjustment-type">
                                                  {{oneLossAndAdjustment.type.description}}
                                                </span>
@@ -130,128 +133,137 @@
                                                <span class="tpl-adjustment-qty">
                                                      <input ng-required="true"
                                                             ng-disabled="formDisabled"
-                                                            id="{{getId('D', $parent, true)}}"
+
                                                             name="{{oneLossAndAdjustment.type.displayOrder}}"
-                                                              type="text"
-                                                              ng-model="oneLossAndAdjustment.quantity"
+                                                            type="text"
+                                                            ng-model="oneLossAndAdjustment.quantity"
                                                             ng-change="rnrLineItem.reEvaluateTotalLossesAndAdjustments(); resetModalError()"
-                                                              rnr-validator="positiveInteger"
-                                                              maxlength="8"
+                                                            rnr-validator="positiveInteger"
+                                                            maxlength="8"
                                                             ng-class="highlightRequiredFieldInModal(oneLossAndAdjustment.quantity)"
                                                             data-keyboard="false"
-                                                              />
+                                                       />
                                                      <div class="rnr-form-error"
                                                           id="{{oneLossAndAdjustment.type.displayOrder}}"
-                                                       style="display:none;">
+                                                          style="display:none;">
                                                        Enter Numeric Data
                                                      </div>
                                                        </span>
-                                             </li>
-                                           </ul>
-                                         </div>
+                                               </li>
+                                             </ul>
+                                           </div>
 
-                                         <div class="adjustment-total clearfix alert alert-warning" ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0">
-                                           <span class="pull-left">Total</span> {{rnrLineItem.rnrLineItem.totalLossesAndAdjustments}}
+                                           <div class="adjustment-total clearfix alert alert-warning"
+                                                ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0">
+                                             <span class="pull-left">Total</span>
+                                             {{rnrLineItem.rnrLineItem.totalLossesAndAdjustments}}
-                                         </div>
-                                               <div class="alert alert-danger" id="modalErrorMessage"
-                                                    ng-model="modalError"
-                                                    ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0 && modalError">
-                                                   {{modalError}}
-                                       </div>
-                                           </div>
-                                       <div class="modal-footer">
+                                           </div>
+                                           <div class="alert alert-danger" id="modalErrorMessage"
+                                                ng-model="modalError"
+                                                ng-show="rnrLineItem.rnrLineItem.lossesAndAdjustments.length > 0 && modalError">
+                                             {{modalError}}
+                                           </div>
+                                         </div>
+                                         <div class="modal-footer">
 
-                                               <input type="button" class="btn btn-success save-button"
-                                                      ng-click="saveLossesAndAdjustmentsForRnRLineItem(rnrLineItem, rnr, programRnRColumnList)"
-                                                      value="Done"/>
-                                       </div>
-                                   </div>
+                                           <input type="button" class="btn btn-success save-button"
+                                                  ng-click="saveLossesAndAdjustmentsForRnRLineItem(rnrLineItem, rnr, programRnRColumnList)"
+                                                  value="Done"/>
+                                         </div>
+                                       </div>
-                                          <div ng-class="highlightNestedFieldsWithError(rnrLineItem.rnrLineItem[column.name], 'quantity')">
-                                              <a ng-click="showLossesAndAdjustmentModalForLineItem(rnrLineItem.rnrLineItem)"
+                                          <div
+                                            ng-class="highlightNestedFieldsWithError(rnrLineItem.rnrLineItem[column.name], 'quantity')">
+                                            <a
+                                              ng-click="showLossesAndAdjustmentModalForLineItem(rnrLineItem.rnrLineItem)"
-                                                 class="rnr-adjustment">
+                                              class="rnr-adjustment">
                                             <span class="adjustment-value">
                                           {{rnrLineItem.rnrLineItem.totalLossesAndAdjustments}}</span>
-                                      </a>
+                                            </a>
                                           </div>
                                    </span>
 
 
-                         <span ng-switch-when = "stockInHand" ng-class="getCellErrorClass(rnrLineItem, programRnRColumnList)">
+                         <span ng-switch-when="stockInHand">
-                           <input ng-required = "true" ng-disabled = "formDisabled"
+                           <input ng-required="true" ng-disabled="formDisabled"
-                                  id = "{{getId('E', $parent)}}" type = "text"
+                                  type="text" ng-model-onblur
-                                  name = "stockInHand{{rnrLineItem.rnrLineItem['id']}}"
+                                  name="stockInHand{{rnrLineItem.rnrLineItem['id']}}"
-                                            ng-model="rnrLineItem.rnrLineItem[column.name]"
-                                            rnr-validator="positiveInteger"
+                                  ng-model="rnrLineItem.rnrLineItem[column.name]"
+                                  rnr-validator="positiveInteger"
-                                            ng-change="rnrLineItem.fill(rnr, programRnRColumnList)" maxlength="8"
-                                            ng-class="highlightRequired(rnrLineItem.rnrLineItem[column.name])"/>
-                                     <span class="rnr-form-error" id="stockInHand{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                  ui-event="{ blur : 'rnrLineItem.fill(rnr, programRnRColumnList)' }" maxlength="8"
+                                  ng-class=""/>
+                                     <span class="rnr-form-error" id="stockInHand{{rnrLineItem.rnrLineItem['id']}}"
+                                           style="display:none;">
                                       Enter Numeric Data
                                      </span>
-                            <span class="row-specific-error" ng-show="rnrLineItem.getErrorMessage(programRnRColumnList)" style="background: red;">
-                            {{rnrLineItem.getErrorMessage(programRnRColumnList)}}
-                                <span class="beak-down"></span>
-                                   </span>
+                         </span>
-                         </span >
 
                                    <span ng-switch-when="newPatientCount">
-                                     <input ng-required="true" ng-disabled="formDisabled" id="{{getId('F', $parent)}}" type="text"
+                                     <input ng-required="true" ng-disabled="formDisabled" type="text" ng-model-onblur
                                             name="newPatientCount{{rnrLineItem.rnrLineItem['id']}}"
                                             ng-model="rnrLineItem.rnrLineItem[column.name]"
                                             rnr-validator="positiveInteger" maxlength="8"
-                                            ng-change="rnrLineItem.fill(rnr, programRnRColumnList)"
-                                            ng-class="highlightRequired(rnrLineItem.rnrLineItem[column.name])"/>
-                                     <span class="rnr-form-error" id="newPatientCount{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                            ui-event="{ blur : 'rnrLineItem.fill(rnr, programRnRColumnList)' }"
+                                            ng-class=""/>
+                                     <span class="rnr-form-error" id="newPatientCount{{rnrLineItem.rnrLineItem['id']}}"
+                                           style="display:none;">
                                       Enter Numeric Data
                                      </span>
                                    </span>
 
                                    <span ng-switch-when="quantityRequested">
-                                     <input ng-disabled="formDisabled" id="{{getId('J', $parent)}}" type="text"
+                                     <input ng-disabled="formDisabled" type="text" ng-model-onblur
                                             name="quantityRequested{{rnrLineItem.rnrLineItem['id']}}"
                                             ng-model="rnrLineItem.rnrLineItem[column.name]"
                                             rnr-validator="positiveInteger" maxlength="8"
-                                            ng-change="rnrLineItem.fill(rnr, programRnRColumnList)"/>
-                                     <span class="rnr-form-error" id="quantityRequested{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                            ui-event="{ blur : 'rnrLineItem.fill(rnr, programRnRColumnList)' }"/>
+                                     <span class="rnr-form-error"
+                                           id="quantityRequested{{rnrLineItem.rnrLineItem['id']}}"
+                                           style="display:none;">
                                       Enter Numeric Data
                                      </span>
                                    </span>
 
                                    <span ng-switch-when="quantityApproved">
-                                     <input  id="{{getId('K', $parent)}}" type="text"
+                                     <input type="text" ng-model-onblur
                                             name="quantityApproved{{rnrLineItem.rnrLineItem['id']}}"
                                             ng-model="rnrLineItem.rnrLineItem[column.name]"
                                             rnr-validator="positiveInteger" maxlength="8"/>
-                                     <span class="rnr-form-error" id="quantityApproved{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                     <span class="rnr-form-error" id="quantityApproved{{rnrLineItem.rnrLineItem['id']}}"
+                                           style="display:none;">
                                       Enter Numeric Data
                                      </span>
                                    </span>
 
                                    <span ng-switch-when="remarks">
-                                       <input ng-disabled="formDisabled" id="{{getId('L', $parent)}}" type="text" name="remarks{{rnrLineItem.rnrLineItem['id']}}"
+                                       <input ng-disabled="formDisabled" type="text" ng-model-onblur
+                                              name="remarks{{rnrLineItem.rnrLineItem['id']}}"
-                                             ng-model="rnrLineItem.rnrLineItem[column.name]"
-                                             maxlength="250"/>
+                                              ng-model="rnrLineItem.rnrLineItem[column.name]"
+                                              maxlength="250"/>
                                    </span>
 
 
                                    <span ng-switch-when="reasonForRequestedQuantity">
-                                       <input ng-disabled="formDisabled" id="{{getId('W', $parent)}}" type="text"
+                                       <input ng-disabled="formDisabled" type="text" ng-model-onblur
-                                            name="reasonForRequestedQuantity{{rnrLineItem.rnrLineItem['id']}}"
-                                            ng-model="rnrLineItem.rnrLineItem[column.name]"
-                                            ng-required="rnrLineItem.rnrLineItem.quantityRequested"
+                                              name="reasonForRequestedQuantity{{rnrLineItem.rnrLineItem['id']}}"
+                                              ng-model="rnrLineItem.rnrLineItem[column.name]"
+                                              ng-required="rnrLineItem.rnrLineItem.quantityRequested"
-                                            ng-class="highlightWarning(rnrLineItem.rnrLineItem[column.name],$parent.$parent.$parent.$index )"
+                                              ng-class="rnrLineItem.highlightWarning(rnrLineItem.rnrLineItem[column.name],$parent.$parent.$parent.$index )"
-                                            maxlength="250"/>
+                                              maxlength="250"/>
-                                          <span class="alert alert-warning reason-request" ng-show="rnrLineItem.rnrLineItem.quantityRequested && !rnrLineItem.rnrLineItem.reasonForRequestedQuantity">
+                                          <span class="alert alert-warning reason-request"
+                                                ng-show="rnrLineItem.rnrLineItem.quantityRequested && !rnrLineItem.rnrLineItem.reasonForRequestedQuantity">
                                           Please enter a reason
                                         </span>
                                    </span>
 
                                    <span ng-switch-when="stockOutDays">
-                                       <input ng-required="true" ng-disabled="formDisabled" id="{{getId('X', $parent)}}" type="text" name="stockOutDays{{rnrLineItem.rnrLineItem['id']}}"
+                                       <input ng-required="true" ng-disabled="formDisabled" type="text" ng-model-onblur
+                                              name="stockOutDays{{rnrLineItem.rnrLineItem['id']}}"
-                                       ng-model="rnrLineItem.rnrLineItem[column.name]"
-                                       rnr-validator="positiveInteger" maxlength="8"
+                                              ng-model="rnrLineItem.rnrLineItem[column.name]"
+                                              rnr-validator="positiveInteger" maxlength="8"
-                                       ng-change="rnrLineItem.fill(rnr, programRnRColumnList)"
-                                       ng-class="highlightRequired(rnrLineItem.rnrLineItem[column.name])"/>
-                                       <span class="rnr-form-error" id="stockOutDays{{rnrLineItem.rnrLineItem['id']}}" style="display:none;">
+                                              ui-event="{ blur : 'rnrLineItem.fill(rnr, programRnRColumnList)()' }"
+                                              ng-class=""/>
+                                       <span class="rnr-form-error" id="stockOutDays{{rnrLineItem.rnrLineItem['id']}}"
+                                             style="display:none;">
                                        Enter Numeric Data
                                        </span>
                                    </span>
@@ -259,64 +271,65 @@
                            </span>
                            <span ng-switch-default>
                                <ng-switch on="column.name">
-                                   <span ng-switch-when = "stockInHand" ng-class="getCellErrorClass(rnrLineItem, programRnRColumnList)">
+                                   <span ng-switch-when="stockInHand">
-                                     <span id = "{{column.indicator+'_'+$parent.$parent.$index}}"
+                                     <span id="{{column.indicator+'_'+$parent.$parent.$index}}"
-                                           ng-bind = "rnrLineItem.rnrLineItem[column.name]"
+                                           ng-bind="rnrLineItem.rnrLineItem[column.name]"
-                                           class = "cell-text" >
+                                           class="cell-text">
-                                     </span >
+                                     </span>
-                                      <span class="row-specific-error" ng-show="rnrLineItem.getErrorMessage(programRnRColumnList)" style="background: red;">
-                                       {{rnrLineItem.getErrorMessage(programRnRColumnList)}}
-                                           <span class="beak-down"></span>
+
-                                      </span >
+                                   </span>
-                                   </span>
                                    <span ng-switch-when="price">
-                                       <span id="{{'priceCurrency_'+$parent.$parent.$index}}" class="cell-text" ng-show="showCurrencySymbol(rnrLineItem.rnrLineItem[column.name])">
-                                           {{currency}}
-                                       </span>
-                                       <span id="{{column.indicator+'_'+$parent.$parent.$index}}" ng-bind="rnrLineItem.rnrLineItem[column.name]"
+
+                                       <span id="{{column.indicator+'_'+$parent.$parent.$index}}"
+                                             ng-bind="rnrLineItem.rnrLineItem[column.name]"
-                                           class="cell-text">
+                                             class="cell-text">
                                        </span>
                                    </span>
                                    <span ng-switch-when="cost">
-                                       <span id="{{'costCurrency_'+$parent.$parent.$index}}" class="cell-text" ng-show="showCurrencySymbol(rnrLineItem.rnrLineItem[column.name])" >
-                                           {{currency}}
-                                       </span>
-                                       <span id="{{column.indicator+'_'+$parent.$parent.$index}}" ng-bind="rnrLineItem.rnrLineItem[column.name]"
+
+                                       <span id="{{column.indicator+'_'+$parent.$parent.$index}}"
+                                             ng-bind="rnrLineItem.rnrLineItem[column.name]"
-                                           class="cell-text">
+                                             class="cell-text">
                                        </span>
                                    </span>
-                                    <span id="{{column.indicator+'_'+$parent.$parent.$index}}" ng-bind="rnrLineItem.rnrLineItem[column.name]"
+                                    <span id="{{column.indicator+'_'+$parent.$parent.$index}}"
+                                          ng-bind="rnrLineItem.rnrLineItem[column.name]"
                                           class="cell-text" ng-switch-default>
                                     </span>
                                </ng-switch>
                            </span>
-                       </ng-switch>
-                   </td>
-               </tr>
-               </tbody>
-           </table>
-   </div>
+</ng-switch>
+</td>
+</tr>
+</tbody>
+</table>
+</div>
-   <br />
+<br/>
 
-  <div id="action_buttons" class="action-buttons">
-      <div class="form-cell button-row">
+<div id="action_buttons" class="action-buttons">
+  <div class="form-cell button-row">
-        <input ng-disabled="formDisabled" type="button" ng-click="saveRnr()" class="btn btn-primary save-button" value="Save"/>
-        <input ng-show="rnr.status == 'INITIATED' && hasPermission('CREATE_REQUISITION')" ng-disabled="formDisabled" type="submit" class="btn btn-success submit-button" value="Submit"/>
-        <input type="button" ng-show="(rnr.status == 'SUBMITTED' || rnr.status == 'AUTHORIZED') && hasPermission('AUTHORIZE_REQUISITION')"
-               ng-disabled="rnr.status == 'AUTHORIZED'" ng-click="authorizeRnr()" class="btn btn-success submit-button" value="Authorize"/>
+    <input ng-disabled="formDisabled" type="button" ng-click="saveRnr()" class="btn btn-primary save-button"
+           value="Save"/>
+    <input ng-show="rnr.status == 'INITIATED' && hasPermission('CREATE_REQUISITION')" ng-disabled="formDisabled"
+           type="submit" class="btn btn-success submit-button" value="Submit"/>
+    <input type="button"
+           ng-show="(rnr.status == 'SUBMITTED' || rnr.status == 'AUTHORIZED') && hasPermission('AUTHORIZE_REQUISITION')"
+           ng-disabled="rnr.status == 'AUTHORIZED'" ng-click="authorizeRnr()" class="btn btn-success submit-button"
+           value="Authorize"/>
-      </div>
+  </div>
   <div class="toolbar-error" id="saveFailMessage" ng-model="error" ng-show="error && !submitError && !submitMessage">
     {{error}}
   </div>
-    <div class="toolbar-error" id="submitFailMessage" ng-model="submitError" ng-show="submitError">
-      {{submitError}}
-    </div>
+  <div class="toolbar-error" id="submitFailMessage" ng-model="submitError" ng-show="submitError">
+    {{submitError}}
+  </div>
-  <div class="toolbar-success" id="saveSuccessMsgDiv" ng-model="message" ng-show="!submitMessage && !submitError && message">
+  <div class="toolbar-success" id="saveSuccessMsgDiv" ng-model="message"
+       ng-show="!submitMessage && !submitError && message">
     {{message}}
   </div>
-    <div class="toolbar-success" id="submitSuccessMsgDiv" ng-model="submitMessage" ng-show="submitMessage">
-      {{submitMessage}}
-    </div>
-   </div>
+  <div class="toolbar-success" id="submitSuccessMsgDiv" ng-model="submitMessage" ng-show="submitMessage">
+    {{submitMessage}}
+  </div>
+</div>
 </form>
- </div>
+</div>
Index: modules/openlmis-web/src/main/webapp/public/js/rnr/module/rnr-module.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>var rnrModule = angular.module('rnr', ['openlmis']).config(['$routeProvider', function ($routeProvider) {\n    $routeProvider.\n        when('/init-rnr', {controller:InitiateRnrController, templateUrl:'partials/init.html'}).\n        when('/supervised/init-rnr', {controller:InitiateRnrController, templateUrl:'partials/supervised-init.html'}).\n        when('/create-rnr/:facility/:program/:period', {templateUrl:'partials/create.html'}).\n        when('/approve/list', {templateUrl:'partials/approve.html'}).\n        otherwise({redirectTo:'/init-rnr'});\n}]).directive('rnrValidator', function () {\n        return {\n            require:'?ngModel',\n            link:function (scope, element, attrs, ctrl) {\n                var validationFunction = rnrModule[attrs.rnrValidator];\n                ctrl.$parsers.unshift(function (viewValue) {\n                    if (validationFunction(viewValue, element.attr('name'))) {\n                        ctrl.$setValidity(element.attr('name'), true);\n                        ctrl.$setValidity('rnrError', true);\n                        if (viewValue == \"\") viewValue = undefined;\n                        return viewValue;\n                    } else {\n                        ctrl.$setValidity(element.attr('name'), false);\n                        if(!attrs['preventRnrError']) ctrl.$setValidity('rnrError', false);\n                        return undefined;\n                    }\n                });\n            }\n        };\n    });\n\nrnrModule.positiveInteger = function (value, errorHolder) {\n    var toggleErrorMessageDisplay = function (valid, errorHolder) {\n        if (valid) {\n            document.getElementById(errorHolder).style.display = 'none';\n        } else {\n            document.getElementById(errorHolder).style.display = 'block';\n        }\n    };\n\n    var INTEGER_REGEXP = /^\\d*$/;\n    var valid = INTEGER_REGEXP.test(value);\n\n    if (errorHolder != undefined) toggleErrorMessageDisplay(valid, errorHolder)\n\n    return valid;\n};\n\n
===================================================================
--- modules/openlmis-web/src/main/webapp/public/js/rnr/module/rnr-module.js	(revision 83f4761be08f420a827bd4db1e316b79f0ad0bff)
+++ modules/openlmis-web/src/main/webapp/public/js/rnr/module/rnr-module.js	(revision )
@@ -1,45 +1,56 @@
 var rnrModule = angular.module('rnr', ['openlmis']).config(['$routeProvider', function ($routeProvider) {
-    $routeProvider.
-        when('/init-rnr', {controller:InitiateRnrController, templateUrl:'partials/init.html'}).
-        when('/supervised/init-rnr', {controller:InitiateRnrController, templateUrl:'partials/supervised-init.html'}).
-        when('/create-rnr/:facility/:program/:period', {templateUrl:'partials/create.html'}).
-        when('/approve/list', {templateUrl:'partials/approve.html'}).
-        otherwise({redirectTo:'/init-rnr'});
+  $routeProvider.
+    when('/init-rnr', {controller:InitiateRnrController, templateUrl:'partials/init.html'}).
+    when('/supervised/init-rnr', {controller:InitiateRnrController, templateUrl:'partials/supervised-init.html'}).
+    when('/create-rnr/:facility/:program/:period', {templateUrl:'partials/create.html'}).
+    when('/approve/list', {templateUrl:'partials/approve.html'}).
+    otherwise({redirectTo:'/init-rnr'});
+
-}]).directive('rnrValidator', function () {
+}]).directive('rnrValidator',function () {
-        return {
+    return {
-            require:'?ngModel',
-            link:function (scope, element, attrs, ctrl) {
-                var validationFunction = rnrModule[attrs.rnrValidator];
-                ctrl.$parsers.unshift(function (viewValue) {
-                    if (validationFunction(viewValue, element.attr('name'))) {
-                        ctrl.$setValidity(element.attr('name'), true);
-                        ctrl.$setValidity('rnrError', true);
-                        if (viewValue == "") viewValue = undefined;
-                        return viewValue;
-                    } else {
-                        ctrl.$setValidity(element.attr('name'), false);
-                        if(!attrs['preventRnrError']) ctrl.$setValidity('rnrError', false);
-                        return undefined;
-                    }
+
+    };
+  }).directive('ngModelOnblur', function () {
+    return {
+      restrict:'A',
+      require:'ngModel',
+      link:function (scope, elm, attr, ngModelCtrl) {
+        if (attr.type === 'radio' || attr.type === 'checkbox') return;
+
+        elm.unbind('input').unbind('keydown').unbind('change');
+        elm.bind('blur', function () {
+          scope.$apply(function () {
+            ngModelCtrl.$setViewValue(elm.val());
-                });
+          });
+        });
-            }
+      }
+    };
+  }).directive('whenScrolled', function() {
+      return function(scope, elm, attr) {
+          var raw = elm[0];
+
+          elm.bind('scroll', function() {
+              if (raw.scrollTop + raw.offsetHeight >= raw.scrollHeight) {
+                  scope.$apply(attr.whenScrolled());
+              }
+          });
-        };
-    });
+      };
+  });
 
 rnrModule.positiveInteger = function (value, errorHolder) {
-    var toggleErrorMessageDisplay = function (valid, errorHolder) {
-        if (valid) {
-            document.getElementById(errorHolder).style.display = 'none';
-        } else {
-            document.getElementById(errorHolder).style.display = 'block';
-        }
-    };
+  var toggleErrorMessageDisplay = function (valid, errorHolder) {
+    if (valid) {
+      document.getElementById(errorHolder).style.display = 'none';
+    } else {
+      document.getElementById(errorHolder).style.display = 'block';
+    }
+  };
 
-    var INTEGER_REGEXP = /^\d*$/;
-    var valid = INTEGER_REGEXP.test(value);
+  var INTEGER_REGEXP = /^\d*$/;
+  var valid = INTEGER_REGEXP.test(value);
 
-    if (errorHolder != undefined) toggleErrorMessageDisplay(valid, errorHolder)
+  if (errorHolder != undefined) toggleErrorMessageDisplay(valid, errorHolder)
 
-    return valid;
+  return valid;
 };
 
