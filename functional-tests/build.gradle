apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jetty'

//task "create-dirs" << {
//    sourceSets*.java.srcDirs*.each { it.mkdirs() }
//    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
//}


repositories {
    mavenCentral()
}

dependencies {


    compile 'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.23.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.23.0',
            'net.sf.json-lib:json-lib:0.9'

    testCompile 'junit:junit:4.8.2',
            'org.springframework:spring-test:3.1.1.RELEASE',
            'org.mockito:mockito-all:1.9.0',
            'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.23.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.23.0',
            'net.sf.json-lib:json-lib:0.9'

}

test{
    exclude '**/org/openlmis/functional/*.*'
}

task buildOpenLmis(type: GradleBuild){
    buildFile= '../modules/openlmis-web/build.gradle'
    tasks = ['build']
}

task functionalTest(type:Test,dependsOn:test){
    include '**/org/openlmis/functional/*.*'
    useTestNG()
}

functionalTest.doFirst(){
    buildOpenLmis.execute()
    jettyRunWar.daemon = true
    jettyRunWar.webApp =new File("../modules/openlmis-web/build/libs/openlmis-web.war")
    jettyRunWar.execute()
}

functionalTest.doLast(){
    jettyStop.execute()
}

[jettyRunWar,jettyStop]*.stopPort = 8080
[jettyRunWar,jettyStop]*.stopKey = 'stopKey'

jettyRunWar{
    contextPath = 'openlmis'
    httpPort=8080
}